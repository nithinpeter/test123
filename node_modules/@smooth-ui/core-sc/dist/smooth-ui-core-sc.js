(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('styled-components'), require('prop-types'), require('polished'), require('react-dom')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react', 'styled-components', 'prop-types', 'polished', 'react-dom'], factory) :
  (factory((global.smoothUI = {}),global.React,global.styled,global.PropTypes,global.polished,global.ReactDom));
}(this, (function (exports,React,scStyled,PropTypes,polished,ReactDOM) { 'use strict';

  React = React && React.hasOwnProperty('default') ? React['default'] : React;
  var scStyled__default = 'default' in scStyled ? scStyled['default'] : scStyled;
  PropTypes = PropTypes && PropTypes.hasOwnProperty('default') ? PropTypes['default'] : PropTypes;
  ReactDOM = ReactDOM && ReactDOM.hasOwnProperty('default') ? ReactDOM['default'] : ReactDOM;

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function patchStyledComponent(StyledComponent) {
    if (!StyledComponent.target.__smoothUIComponent) {
      return StyledComponent;
    }

    var render = StyledComponent.render,
        baseWithComponent = StyledComponent.withComponent;

    StyledComponent.withComponent = function (component) {
      var Target = StyledComponent.target;

      var NewTarget = function NewTarget(props) {
        return React.createElement(Target, _extends({
          as: component
        }, props));
      }; // eslint-disable-next-line no-underscore-dangle


      NewTarget.__smoothUIComponent = true;

      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return patchStyledComponent(Object.assign(baseWithComponent.apply(void 0, [NewTarget].concat(args)), {
        defaultProps: StyledComponent.defaultProps,
        propTypes: StyledComponent.propTypes,
        displayName: StyledComponent.displayName,
        componentStyle: StyledComponent.componentStyle,
        styledComponentId: StyledComponent.styledComponentId
      }));
    };

    StyledComponent.render = function (_ref, ref) {
      var as = _ref.as,
          props = _objectWithoutPropertiesLoose(_ref, ["as"]);

      return render(_objectSpread({
        forwardedAs: as
      }, props), ref);
    };

    return StyledComponent;
  }

  function wrapCreateStyledComponent(createStyledComponent) {
    var attrs = createStyledComponent.attrs,
        withConfig = createStyledComponent.withConfig;

    var wrappedCreateStyledComponent = function wrappedCreateStyledComponent() {
      var StyledComponent = createStyledComponent.apply(void 0, arguments);
      return patchStyledComponent(StyledComponent);
    };

    wrappedCreateStyledComponent.attrs = function () {
      return wrapCreateStyledComponent(attrs.apply(void 0, arguments));
    };

    wrappedCreateStyledComponent.withConfig = function () {
      return wrapCreateStyledComponent(withConfig.apply(void 0, arguments));
    };

    return wrappedCreateStyledComponent;
  }

  function wrapStyled(styled) {
    var newStyled = function newStyled(component) {
      return wrapCreateStyledComponent(styled(component));
    };

    Object.assign(newStyled, styled);
    return newStyled;
  }

  var styled =
  /*#__PURE__*/
  wrapStyled(scStyled__default);

  var DEFAULT_BREAKPOINTS = {
    xs: 0,
    sm: 576,
    md: 768,
    lg: 992,
    xl: 1200
  };
  var getBreakpoints = function getBreakpoints(props) {
    return props && props.theme && props.theme.breakpoints || DEFAULT_BREAKPOINTS;
  };
  var getBreakpointsEntries = function getBreakpointsEntries(props) {
    var breakpoints = getBreakpoints(props);
    var entries = Object.keys(breakpoints).reduce(function (entries, key) {
      return entries.concat([[key, breakpoints[key]]]);
    }, []);
    return entries.sort(function (a, b) {
      return a[1] > b[1];
    });
  };
  var getNextBreakpoint = function getNextBreakpoint(name, props) {
    var entries = getBreakpointsEntries(props);
    var index = entries.findIndex(function (_ref) {
      var key = _ref[0];
      return key === name;
    });
    return index < entries.length - 1 ? entries[index + 1][0] : null;
  };
  var getPreviousBreakpoint = function getPreviousBreakpoint(name, props) {
    var entries = getBreakpointsEntries(props);
    var index = entries.findIndex(function (_ref2) {
      var key = _ref2[0];
      return key === name;
    });
    return index >= 1 ? entries[index - 1][0] : null;
  };
  /**
   * Minimum breakpoint width.
   * Null for the smallest breakpoint.
   */

  var getBreakpointMin = function getBreakpointMin(name, props) {
    var breakpoints = getBreakpoints(props);
    var breakPoint = breakpoints[name];
    return breakPoint !== 0 ? breakPoint : null;
  };
  /**
   * Maximum breakpoint width. Null for the largest (last) breakpoint.
   * The maximum value is calculated as the minimum of the next one less 0.02px
   * to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.
   * See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
   * Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
   * See https://bugs.webkit.org/show_bug.cgi?id=178261
   */

  var getBreakpointMax = function getBreakpointMax(name, props) {
    var next = getNextBreakpoint(name, props);
    return next ? getBreakpointMin(next, props) - 0.02 : null;
  };
  var mediaMinWidth = function mediaMinWidth(value) {
    return "@media (min-width: " + value + "px)";
  };
  var mediaMaxWidth = function mediaMaxWidth(value) {
    return "@media (max-width: " + value + "px)";
  };
  var mediaBetweenWidth = function mediaBetweenWidth(min, max) {
    return "@media (min-width: " + min + "px) and (max-width: " + max + "px)";
  };
  var up = function up(name, code) {
    return function (props) {
      var value = getBreakpointMin(name, props);
      if (value === null) return code;
      return scStyled.css(["", "{", ";}"], mediaMinWidth(value), code);
    };
  };
  var down = function down(name, code) {
    return function (props) {
      var next = getNextBreakpoint(name, props);
      var previous = getPreviousBreakpoint(name, props);
      var value = getBreakpointMax(previous, props);
      if (next === null) return code;
      return scStyled.css(["", "{", ";}"], mediaMaxWidth(value), code);
    };
  };
  var between = function between(lower, upper, code) {
    return function (props) {
      var min = getBreakpointMin(lower, props);
      var max = getBreakpointMax(upper, props);
      var upperPrevious = getPreviousBreakpoint(upper, props);
      var previousMax = getBreakpointMax(upperPrevious, props);

      if (min !== null && max !== null) {
        return scStyled.css(["", "{", ";}"], mediaBetweenWidth(min, previousMax), code);
      }

      if (max === null) return up(lower, code)(props);
      if (min === null) return down(upper, code)(props);
      return null;
    };
  };

  var is = function is(n) {
    return n !== undefined && n !== null;
  };
  var num = function num(n) {
    return typeof n === 'number' && !Number.isNaN(n);
  };
  var string = function string(n) {
    return typeof n === 'string' && n !== '';
  };
  var obj = function obj(n) {
    return typeof n === 'object' && n !== null;
  };
  var func = function func(n) {
    return typeof n === 'function';
  };
  var identity = function identity(n) {
    return n;
  };
  var negative = function negative(n) {
    return n < 0;
  };
  var get = function get(obj) {
    for (var _len = arguments.length, paths = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      paths[_key - 1] = arguments[_key];
    }

    return paths.join('.').split('.').reduce(function (a, b) {
      return a && is(a[b]) ? a[b] : undefined;
    }, obj);
  };
  var cascade = function cascade(fn) {
    if (!func(fn)) return fn;

    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    var next = fn.apply(void 0, args);
    return cascade.apply(void 0, [next].concat(args));
  };
  var merge = function merge(a, b) {
    return Object.assign({}, a, b, Object.keys(b || {}).reduce(function (all, key) {
      var _Object$assign;

      return Object.assign(all, (_Object$assign = {}, _Object$assign[key] = obj(a[key]) ? merge(a[key], b[key]) : b[key], _Object$assign));
    }, {}));
  };
  var omit = function omit(obj, fields) {
    var shallowCopy = _objectSpread({}, obj);

    for (var i = 0; i < fields.length; i += 1) {
      var key = fields[i];
      delete shallowCopy[key];
    }

    return shallowCopy;
  };

  var lazyTh = function lazyTh(name) {
    return function (props) {
      return cascade(function (p) {
        return get(p.theme, name);
      }, props);
    };
  };
  var th = function th(name, transform) {
    return function (props) {
      var result = lazyTh(name)(props);

      if (!is(result)) {
        throw new Error("\"" + name + "\" not found in theme");
      }

      return transform ? transform(result) : result;
    };
  };
  var mixin = function mixin(name) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return function (props) {
      return props.theme[name](props).apply(void 0, args);
    };
  };
  var prop = function prop(name, themeFallback) {
    return function (props) {
      return props[name] === undefined ? th(themeFallback)(props) : props[name];
    };
  };
  var calc = function calc(value, fn) {
    var _String$match = String(value).match(/([\d.]+)\s*(.*)/),
        num$$1 = _String$match[1],
        unit = _String$match[2];

    return "" + fn(Number(num$$1)) + (unit || 'px');
  };
  var unit = function unit(_unit) {
    return function (value) {
      return num(value) ? "" + value + _unit : value;
    };
  };
  var px =
  /*#__PURE__*/
  unit('px');

  var styleFromValue = function styleFromValue(_ref) {
    var cssProperty = _ref.cssProperty,
        value = _ref.value,
        transform = _ref.transform,
        variantsKey = _ref.variants,
        props = _ref.props;

    if (variantsKey && is(value)) {
      // Try to extract from theme
      var variants = lazyTh(variantsKey)(props);

      if (variants) {
        var valueFromVariants = cascade(variants[value], props);

        if (is(valueFromVariants)) {
          value = valueFromVariants;
        }
      }
    }

    if (string(value) || num(value)) {
      var _ref2;

      return _ref2 = {}, _ref2[cssProperty] = transform(value), _ref2;
    }

    return null;
  };

  var stylePropType =
  /*#__PURE__*/
  PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.object]);
  function style(_ref3) {
    var _fn$propTypes;

    var prop = _ref3.prop,
        cssProperty = _ref3.cssProperty,
        _ref3$transform = _ref3.transform,
        transform = _ref3$transform === void 0 ? identity : _ref3$transform,
        variants = _ref3.variants;

    var fn = function fn(props) {
      var value = props[prop];
      if (!is(value)) return null;
      cssProperty = cssProperty || prop;
      var style = styleFromValue({
        value: value,
        cssProperty: cssProperty,
        transform: transform,
        variants: variants,
        props: props
      });
      if (style) return style;

      if (obj(value)) {
        return Object.keys(value).map(function (breakpoint) {
          var _ref4;

          var style = styleFromValue({
            cssProperty: cssProperty,
            value: value[breakpoint],
            transform: transform,
            variants: variants,
            props: props
          });
          if (!style) return null;
          var breakpointValue = getBreakpointMin(breakpoint, props);
          if (breakpointValue === null) return style;
          return _ref4 = {}, _ref4[mediaMinWidth(breakpointValue)] = style, _ref4;
        }).reduce(merge, {});
      }

      return null;
    };

    fn.propTypes = (_fn$propTypes = {}, _fn$propTypes[prop] = stylePropType, _fn$propTypes);
    fn.meta = {
      props: [prop]
    };
    return fn;
  }
  var composeStyles = function composeStyles() {
    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      funcs[_key2] = arguments[_key2];
    }

    var fn = function fn(props) {
      return funcs.map(function (fn) {
        return fn(props);
      }).filter(Boolean).reduce(merge, {});
    };

    fn.propTypes = funcs.map(function (fn) {
      return fn.propTypes;
    }).reduce(merge, {});
    return fn;
  };

  /* eslint-disable no-unused-vars */

  var fontFamily = '-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif'; // Colors

  var white = '#fff';
  var gray100 = '#f8f9fa';
  var gray200 = '#e9ecef';
  var gray300 = '#dee2e6';
  var gray400 = '#ced4da';
  var gray500 = '#adb5bd';
  var gray600 = '#6c757d';
  var gray700 = '#495057';
  var gray800 = '#343a40';
  var gray900 = '#212529';
  var black = '#000';
  var blue = '#007bff';
  var indigo = '#6610f2';
  var purple = '#6f42c1';
  var pink = '#e83e8c';
  var red = '#dc3545';
  var brick = '#bd4932';
  var orange = '#fd7e14';
  var yellow = '#ffc107';
  var green = '#28a745';
  var teal = '#20c997';
  var cyan = '#17a2b8';
  var primary =
  /*#__PURE__*/
  th('brick');
  var secondary =
  /*#__PURE__*/
  th('gray600');
  var success =
  /*#__PURE__*/
  th('green');
  var info =
  /*#__PURE__*/
  th('cyan');
  var warning =
  /*#__PURE__*/
  th('yellow');
  var danger =
  /*#__PURE__*/
  th('red');
  var light =
  /*#__PURE__*/
  th('gray100');
  var dark =
  /*#__PURE__*/
  th('gray800');
  var primaryLight =
  /*#__PURE__*/
  th('primary', function (c) {
    return polished.lighten(0.3, c);
  });
  var secondaryLight =
  /*#__PURE__*/
  th('secondary', function (c) {
    return polished.lighten(0.3, c);
  });
  var yikTextDark = '#111';
  var yikTextLight = '#fff';
  var colorVariants = ['primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark']; // System

  var colors =
  /*#__PURE__*/
  ['white', 'gray100', 'gray200', 'gray300', 'gray400', 'gray500', 'gray600', 'gray700', 'gray800', 'gray900', 'black', 'blue', 'indigo', 'purple', 'pink', 'red', 'brick', 'orange', 'yellow', 'green', 'teal', 'cyan', 'primary', 'secondary', 'success', 'info', 'warning', 'danger', 'light', 'dark', 'primaryLight', 'secondaryLight'].reduce(function (obj, v) {
    obj[v] = th(v);
    return obj;
  }, {});
  var fontSizes = [12, 14, 16, 20, 24, 32, 48, 64, 72];
  var spaces = [0, 8, 16, 24, 32, 40, 48, 56, 64, 72]; // Borders

  var borderRadius = '.25rem';
  var borderRadiusSm = '.2rem';
  var borderRadiusLg = '.3rem';
  var borderWidth = '1px'; // Fonts

  var fontSizeBase = '1rem';
  var fontSizeSm =
  /*#__PURE__*/
  th('fontSizeBase', function (fontSize) {
    return polished.modularScale(-1, fontSize);
  });
  var fontSizeLg =
  /*#__PURE__*/
  th('fontSizeBase', function (fontSize) {
    return polished.modularScale(1, fontSize);
  });
  var fontWeightLight = 300;
  var fontWeightNormal = 400;
  var fontWeightBold = 700;
  var lineHeightBase = 1.5;
  var lineHeightSm = 1.5;
  var lineHeightLg = 1.5; // Input + Buttons

  var inputBtnPaddingY = '.375rem';
  var inputBtnPaddingX = '.75rem';
  var inputBtnLineHeight =
  /*#__PURE__*/
  th('lineHeightBase');
  var inputBtnPaddingYSm = '.25rem';
  var inputBtnPaddingXSm = '.5rem';
  var inputBtnLineHeightSm =
  /*#__PURE__*/
  th('lineHeightSm');
  var inputBtnPaddingYLg = '.5rem';
  var inputBtnPaddingXLg = '1rem';
  var inputBtnLineHeightLg =
  /*#__PURE__*/
  th('lineHeightLg');
  var inputBtnBorderWidth =
  /*#__PURE__*/
  th('borderWidth'); // Buttons

  var btnPaddingY =
  /*#__PURE__*/
  th('inputBtnPaddingY');
  var btnPaddingX =
  /*#__PURE__*/
  th('inputBtnPaddingX');
  var btnLineHeight =
  /*#__PURE__*/
  th('inputBtnLineHeight');
  var btnPaddingYSm =
  /*#__PURE__*/
  th('inputBtnPaddingYSm');
  var btnPaddingXSm =
  /*#__PURE__*/
  th('inputBtnPaddingXSm');
  var btnLineHeightSm =
  /*#__PURE__*/
  th('inputBtnLineHeightSm');
  var btnPaddingYLg =
  /*#__PURE__*/
  th('inputBtnPaddingYLg');
  var btnPaddingXLg =
  /*#__PURE__*/
  th('inputBtnPaddingXLg');
  var btnLineHeightLg =
  /*#__PURE__*/
  th('inputBtnLineHeightLg');
  var btnBorderWidth = 0;
  var btnDisabledOpacity = 0.8; // Inputs

  var inputPaddingY =
  /*#__PURE__*/
  th('inputBtnPaddingY');
  var inputPaddingX =
  /*#__PURE__*/
  th('inputBtnPaddingX');
  var inputLineHeight =
  /*#__PURE__*/
  th('inputBtnLineHeight');
  var inputPaddingYSm =
  /*#__PURE__*/
  th('inputBtnPaddingYSm');
  var inputPaddingXSm =
  /*#__PURE__*/
  th('inputBtnPaddingXSm');
  var inputLineHeightSm =
  /*#__PURE__*/
  th('inputBtnLineHeightSm');
  var inputPaddingYLg =
  /*#__PURE__*/
  th('inputBtnPaddingYLg');
  var inputPaddingXLg =
  /*#__PURE__*/
  th('inputBtnPaddingXLg');
  var inputLineHeightLg =
  /*#__PURE__*/
  th('inputBtnLineHeightLg');
  var inputBorderWidth =
  /*#__PURE__*/
  th('inputBtnBorderWidth');
  var inputBorderColor =
  /*#__PURE__*/
  th('gray300');
  var inputBgColor =
  /*#__PURE__*/
  th('white');
  var inputDisabledBgColor =
  /*#__PURE__*/
  th('gray100');
  var inputDisabledText =
  /*#__PURE__*/
  th('gray600');
  var inputPlaceholderText =
  /*#__PURE__*/
  th('gray600');
  var inputTextColor =
  /*#__PURE__*/
  th('gray900'); // Controls

  var controlFocusBorderColor =
  /*#__PURE__*/
  th('primary', function (color) {
    return polished.lighten(0.25, color);
  });
  var controlFocusBoxShadow = function controlFocusBoxShadow(p) {
    return function (color) {
      return "0 0 0 0.2rem " + th(color, function (c) {
        return polished.transparentize(0.75, c);
      })(p);
    };
  }; // Grid

  var gridColumns = 12;
  var gridGutter = 8;
  var gridMaxWidths = {
    sm: '540px',
    md: '720px',
    lg: '960px',
    xl: '1140px' // Alerts

  };
  var alertPaddingY = '.75rem';
  var alertPaddingX = '1.25rem';
  var alertMarginBottom = '1rem';
  var alertBgLevel = -10;
  var alertBorderLevel = -9;
  var alertColorLevel = 6;
  var alertVariant = function alertVariant(p) {
    return function (baseColorTheme) {
      var baseColor = th(baseColorTheme)(p);
      var alertColorLevel = th('alertColorLevel')(p);
      var alertBgLevel = th('alertBgLevel')(p);
      var alertBorderLevel = th('alertBorderLevel')(p);
      return {
        color: mixin('colorLevel', baseColor, alertColorLevel)(p),
        backgroundColor: mixin('colorLevel', baseColor, alertBgLevel)(p),
        borderColor: mixin('colorLevel', baseColor, alertBorderLevel)(p),
        hr: {
          borderTopColor: polished.darken(0.05, mixin('colorLevel', baseColor, alertColorLevel)(p))
        }
      };
    };
  }; // Z-indexes

  var zIndexControl = 1;
  var zIndexInnerSwitch = 10;
  var zIndexModal = 1050;
  var zIndexModalBackdrop = 1071; // Transitions

  var transitionEnabled = true;
  var transition = function transition(p) {
    return function (value) {
      return p.theme.transitionEnabled ? scStyled.css(["transition:", ";@media screen and (prefers-reduced-motion:reduce){transition:none;}"], value) : '';
    };
  };
  var safeTransitionProperties = ['color', 'border-style', 'visibility', 'background', 'background-color', 'text-decoration', 'box-shadow', 'transform', 'opacity'];
  var transitionBase =
  /*#__PURE__*/
  mixin('transition',
  /*#__PURE__*/
  safeTransitionProperties.map(function (prop$$1) {
    return prop$$1 + " .2s ease-in-out";
  }).join(',')); // Breakpoints

  var breakpoints = DEFAULT_BREAKPOINTS; // Color levels

  var yiqContrastedThreshold = 150;
  var colorInterval = 0.08; // Headings

  var headingsMarginBottom = '.5rem';
  var headingsFontFamily =
  /*#__PURE__*/
  th('fontFamily');
  var headingsFontWeight = 500;
  var headingsLineHeight = 1.2;
  var headingsColor = 'inherit';
  var h1FontSize = '2.5rem';
  var h2FontSize = '2rem';
  var h3FontSize = '1.75rem';
  var h4FontSize = '1.5rem';
  var h5FontSize = '1.25rem';
  var h6FontSize = '1rem';
  var display1Size = '6rem';
  var display2Size = '5.5rem';
  var display3Size = '4.4rem';
  var display4Size = '3.5rem';
  var display1Weight = 300;
  var display2Weight = 300;
  var display3Weight = 300;
  var display4Weight = 300;
  var displayLineHeight =
  /*#__PURE__*/
  th('headingsLineHeight'); // Modals

  var modalBackdropBg = 'rgba(0, 0, 0, 0.5)';
  var modalInnerPadding = '1rem';
  var modalTransitionDuration = 300; // ms

  var modalDialogMargin = '0.5rem';
  var modalDialogMarginYSmUp = '1.75rem';
  var modalContentBg =
  /*#__PURE__*/
  th('white');
  var modalContentBorderWidth =
  /*#__PURE__*/
  th('borderWidth');
  var modalContentBorderColor =
  /*#__PURE__*/
  th('black', function (color) {
    return polished.transparentize(0.8, color);
  });
  var modalContentBorderRadius =
  /*#__PURE__*/
  th('borderRadiusLg');
  var modalContentBoxShadowXs =
  /*#__PURE__*/
  scStyled.css(["0 .25rem .5rem ", ""],
  /*#__PURE__*/
  th('black', function (color) {
    return polished.transparentize(0.8, color);
  }));
  var modalContentBoxShadowSmUp =
  /*#__PURE__*/
  scStyled.css(["0 .5rem 1rem ", ""],
  /*#__PURE__*/
  th('black', function (color) {
    return polished.transparentize(0.8, color);
  }));
  var modalHeaderBorderColor =
  /*#__PURE__*/
  th('gray200');
  var modalFooterBorderColor =
  /*#__PURE__*/
  th('modalHeaderBorderColor');
  var modalHeaderBorderWidth =
  /*#__PURE__*/
  th('modalContentBorderWidth');
  var modalFooterBorderWidth =
  /*#__PURE__*/
  th('modalHeaderBorderWidth'); // Mixins

  var base = function base() {
    return function () {
      return scStyled.css(["box-sizing:border-box;font-family:", ";font-size:", ";line-height:", ";*{box-sizing:border-box;}"], th('fontFamily'), th('fontSizeBase'), th('lineHeightBase'));
    };
  };
  var controlFocus = function controlFocus(props) {
    return function (baseColor) {
      if (baseColor === void 0) {
        baseColor = 'primary';
      }

      return scStyled.css(["outline:0;box-shadow:0 0 2px ", ";"], th(baseColor, function (color) {
        return polished.transparentize(0.1, color);
      }));
    };
  };
  var btnVariant = function btnVariant(props) {
    return function (baseColor) {
      return scStyled.css(["color:", ";background-color:", ";&:focus{", ";}&:not(:disabled):hover,&:not(:disabled):active{background-color:", ";}"], mixin('colorYik', th(baseColor)), th(baseColor), mixin('controlFocus', baseColor), th(baseColor, function (color) {
        return polished.darken(0.05, color);
      }));
    };
  };
  var colorLevel = function colorLevel(props) {
    return function (color, level) {
      color = typeof color === 'function' ? color(props) : color;
      level = typeof level === 'function' ? level(props) : level;
      var baseColor = level > 0 ? th('black')(props) : th('white')(props);
      var absLevel = Math.abs(level);
      return polished.mix(absLevel * colorInterval, baseColor, color);
    };
  };
  var colorYik = function colorYik(props) {
    return function (color) {
      color = typeof color === 'function' ? color(props) : color;

      var _parseToRgb = polished.parseToRgb(color),
          r = _parseToRgb.red,
          g = _parseToRgb.green,
          b = _parseToRgb.blue;

      var yik = (r * 299 + g * 587 + b * 114) / 1000;
      return yik >= th('yiqContrastedThreshold')(props) ? th('yikTextDark')(props) : th('yikTextLight')(props);
    };
  };

  var theme = /*#__PURE__*/Object.freeze({
    fontFamily: fontFamily,
    white: white,
    gray100: gray100,
    gray200: gray200,
    gray300: gray300,
    gray400: gray400,
    gray500: gray500,
    gray600: gray600,
    gray700: gray700,
    gray800: gray800,
    gray900: gray900,
    black: black,
    blue: blue,
    indigo: indigo,
    purple: purple,
    pink: pink,
    red: red,
    brick: brick,
    orange: orange,
    yellow: yellow,
    green: green,
    teal: teal,
    cyan: cyan,
    primary: primary,
    secondary: secondary,
    success: success,
    info: info,
    warning: warning,
    danger: danger,
    light: light,
    dark: dark,
    primaryLight: primaryLight,
    secondaryLight: secondaryLight,
    yikTextDark: yikTextDark,
    yikTextLight: yikTextLight,
    colorVariants: colorVariants,
    colors: colors,
    fontSizes: fontSizes,
    spaces: spaces,
    borderRadius: borderRadius,
    borderRadiusSm: borderRadiusSm,
    borderRadiusLg: borderRadiusLg,
    borderWidth: borderWidth,
    fontSizeBase: fontSizeBase,
    fontSizeSm: fontSizeSm,
    fontSizeLg: fontSizeLg,
    fontWeightLight: fontWeightLight,
    fontWeightNormal: fontWeightNormal,
    fontWeightBold: fontWeightBold,
    lineHeightBase: lineHeightBase,
    lineHeightSm: lineHeightSm,
    lineHeightLg: lineHeightLg,
    inputBtnPaddingY: inputBtnPaddingY,
    inputBtnPaddingX: inputBtnPaddingX,
    inputBtnLineHeight: inputBtnLineHeight,
    inputBtnPaddingYSm: inputBtnPaddingYSm,
    inputBtnPaddingXSm: inputBtnPaddingXSm,
    inputBtnLineHeightSm: inputBtnLineHeightSm,
    inputBtnPaddingYLg: inputBtnPaddingYLg,
    inputBtnPaddingXLg: inputBtnPaddingXLg,
    inputBtnLineHeightLg: inputBtnLineHeightLg,
    inputBtnBorderWidth: inputBtnBorderWidth,
    btnPaddingY: btnPaddingY,
    btnPaddingX: btnPaddingX,
    btnLineHeight: btnLineHeight,
    btnPaddingYSm: btnPaddingYSm,
    btnPaddingXSm: btnPaddingXSm,
    btnLineHeightSm: btnLineHeightSm,
    btnPaddingYLg: btnPaddingYLg,
    btnPaddingXLg: btnPaddingXLg,
    btnLineHeightLg: btnLineHeightLg,
    btnBorderWidth: btnBorderWidth,
    btnDisabledOpacity: btnDisabledOpacity,
    inputPaddingY: inputPaddingY,
    inputPaddingX: inputPaddingX,
    inputLineHeight: inputLineHeight,
    inputPaddingYSm: inputPaddingYSm,
    inputPaddingXSm: inputPaddingXSm,
    inputLineHeightSm: inputLineHeightSm,
    inputPaddingYLg: inputPaddingYLg,
    inputPaddingXLg: inputPaddingXLg,
    inputLineHeightLg: inputLineHeightLg,
    inputBorderWidth: inputBorderWidth,
    inputBorderColor: inputBorderColor,
    inputBgColor: inputBgColor,
    inputDisabledBgColor: inputDisabledBgColor,
    inputDisabledText: inputDisabledText,
    inputPlaceholderText: inputPlaceholderText,
    inputTextColor: inputTextColor,
    controlFocusBorderColor: controlFocusBorderColor,
    controlFocusBoxShadow: controlFocusBoxShadow,
    gridColumns: gridColumns,
    gridGutter: gridGutter,
    gridMaxWidths: gridMaxWidths,
    alertPaddingY: alertPaddingY,
    alertPaddingX: alertPaddingX,
    alertMarginBottom: alertMarginBottom,
    alertBgLevel: alertBgLevel,
    alertBorderLevel: alertBorderLevel,
    alertColorLevel: alertColorLevel,
    alertVariant: alertVariant,
    zIndexControl: zIndexControl,
    zIndexInnerSwitch: zIndexInnerSwitch,
    zIndexModal: zIndexModal,
    zIndexModalBackdrop: zIndexModalBackdrop,
    transitionEnabled: transitionEnabled,
    transition: transition,
    transitionBase: transitionBase,
    breakpoints: breakpoints,
    yiqContrastedThreshold: yiqContrastedThreshold,
    colorInterval: colorInterval,
    headingsMarginBottom: headingsMarginBottom,
    headingsFontFamily: headingsFontFamily,
    headingsFontWeight: headingsFontWeight,
    headingsLineHeight: headingsLineHeight,
    headingsColor: headingsColor,
    h1FontSize: h1FontSize,
    h2FontSize: h2FontSize,
    h3FontSize: h3FontSize,
    h4FontSize: h4FontSize,
    h5FontSize: h5FontSize,
    h6FontSize: h6FontSize,
    display1Size: display1Size,
    display2Size: display2Size,
    display3Size: display3Size,
    display4Size: display4Size,
    display1Weight: display1Weight,
    display2Weight: display2Weight,
    display3Weight: display3Weight,
    display4Weight: display4Weight,
    displayLineHeight: displayLineHeight,
    modalBackdropBg: modalBackdropBg,
    modalInnerPadding: modalInnerPadding,
    modalTransitionDuration: modalTransitionDuration,
    modalDialogMargin: modalDialogMargin,
    modalDialogMarginYSmUp: modalDialogMarginYSmUp,
    modalContentBg: modalContentBg,
    modalContentBorderWidth: modalContentBorderWidth,
    modalContentBorderColor: modalContentBorderColor,
    modalContentBorderRadius: modalContentBorderRadius,
    modalContentBoxShadowXs: modalContentBoxShadowXs,
    modalContentBoxShadowSmUp: modalContentBoxShadowSmUp,
    modalHeaderBorderColor: modalHeaderBorderColor,
    modalFooterBorderColor: modalFooterBorderColor,
    modalHeaderBorderWidth: modalHeaderBorderWidth,
    modalFooterBorderWidth: modalFooterBorderWidth,
    base: base,
    controlFocus: controlFocus,
    btnVariant: btnVariant,
    colorLevel: colorLevel,
    colorYik: colorYik
  });

  var composeStyles$1 = function composeStyles() {
    for (var _len = arguments.length, styles = new Array(_len), _key = 0; _key < _len; _key++) {
      styles[_key] = arguments[_key];
    }

    var stylesByProp = styles.reduce(function (props, systemStyle) {
      if (systemStyle.meta) {
        systemStyle.meta.props.forEach(function (prop) {
          props[prop] = systemStyle;
        });
      }

      return props;
    }, {});

    var composedStyle = function composedStyle(props) {
      var propKeys = Object.keys(props);
      var propCount = propKeys.length;
      var style = {};

      for (var i = 0; i < propCount; i += 1) {
        var propKey = propKeys[i];
        var systemStyle = stylesByProp[propKey];

        if (systemStyle) {
          var _systemStyle;

          style = merge(style, systemStyle((_systemStyle = {}, _systemStyle[propKey] = props[propKey], _systemStyle.theme = props.theme, _systemStyle)));
        }
      }

      return style;
    };

    composedStyle.meta = {
      props: styles.reduce(function (keys, systemStyle) {
        return keys.concat(systemStyle.meta.props);
      }, [])
    };
    composedStyle.propTypes = styles.map(function (systemStyle) {
      return systemStyle.propTypes;
    }).reduce(merge, {});
    return composedStyle;
  };

  var properties = {
    m: 'margin',
    p: 'padding'
  };
  var directions = {
    t: 'Top',
    r: 'Right',
    b: 'Bottom',
    l: 'Left',
    x: ['Left', 'Right'],
    y: ['Top', 'Bottom']
  };
  var spaceKeys = ['m', 'mt', 'mr', 'mb', 'ml', 'mx', 'my', 'p', 'pt', 'pr', 'pb', 'pl', 'px', 'py'];

  var getProperties = function getProperties(key) {
    var _key$split = key.split(''),
        a = _key$split[0],
        b = _key$split[1];

    var property = properties[a];
    var direction = directions[b] || '';
    return Array.isArray(direction) ? direction.map(function (dir) {
      return property + dir;
    }) : [property + direction];
  };

  var getValue = function getValue(variants) {
    return function (n) {
      if (!num(n)) {
        return variants[n] || n;
      }

      var abs = Math.abs(n);
      var neg = negative(n);
      var value = variants[abs] || abs;

      if (!num(value)) {
        return neg ? "-" + value : value;
      }

      return px(value * (neg ? -1 : 1));
    };
  };

  var space = function space(props) {
    var keys = Object.keys(props).filter(function (key) {
      return spaceKeys.includes(key);
    }).sort();
    if (!keys.length) return null;
    var variants = lazyTh('spaces')(props) || {};
    var getStyle = getValue(variants);
    return keys.map(function (key) {
      var value = props[key];
      var properties = getProperties(key);

      var styleFromValue = function styleFromValue(n) {
        return is(n) ? properties.reduce(function (a, prop$$1) {
          var _objectSpread2;

          return _objectSpread({}, a, (_objectSpread2 = {}, _objectSpread2[prop$$1] = getStyle(n), _objectSpread2));
        }, {}) : null;
      };

      if (string(value) || num(value)) {
        return styleFromValue(value);
      }

      if (obj(value)) {
        return Object.keys(value).map(function (breakpoint) {
          var _ref;

          var style$$1 = styleFromValue(value[breakpoint]);
          if (!style$$1) return null;
          var breakpointValue = getBreakpointMin(breakpoint, props);
          if (breakpointValue === null) return style$$1;
          return _ref = {}, _ref[mediaMinWidth(breakpointValue)] = style$$1, _ref;
        }).reduce(merge, {});
      }

      return null;
    }).reduce(merge, {});
  };

  space.propTypes =
  /*#__PURE__*/
  spaceKeys.reduce(function (obj$$1, key) {
    obj$$1[key] = stylePropType;
    return obj$$1;
  }, {});
  space.meta = {
    props: spaceKeys
  };

  var opacity =
  /*#__PURE__*/
  style({
    prop: 'opacity'
  });
  var overflow =
  /*#__PURE__*/
  style({
    prop: 'overflow'
  });
  var basics =
  /*#__PURE__*/
  composeStyles$1(opacity, overflow); // Typography

  var fontFamily$1 =
  /*#__PURE__*/
  style({
    prop: 'fontFamily',
    variants: 'fonts'
  });
  var fontSize =
  /*#__PURE__*/
  style({
    prop: 'fontSize',
    variants: 'fontSizes',
    transform: px
  });
  var lineHeight =
  /*#__PURE__*/
  style({
    prop: 'lineHeight',
    variants: 'lineHeights'
  });
  var fontWeight =
  /*#__PURE__*/
  style({
    prop: 'fontWeight',
    variants: 'fontWeights'
  });
  var textAlign =
  /*#__PURE__*/
  style({
    prop: 'textAlign'
  });
  var letterSpacing =
  /*#__PURE__*/
  style({
    prop: 'letterSpacing',
    variants: 'letterSpacings',
    transform: px
  });
  var color =
  /*#__PURE__*/
  style({
    prop: 'color',
    variants: 'colors'
  });
  var typography =
  /*#__PURE__*/
  composeStyles$1(fontFamily$1, fontSize, lineHeight, fontWeight, textAlign, letterSpacing, color); // Dimensions

  var getDimension = function getDimension(n) {
    return !num(n) || n > 1 ? px(n) : n * 100 + "%";
  };

  var width =
  /*#__PURE__*/
  style({
    prop: 'width',
    transform: getDimension,
    variants: 'widths'
  });
  var height =
  /*#__PURE__*/
  style({
    prop: 'height',
    transform: getDimension,
    variants: 'heights'
  });
  var maxWidth =
  /*#__PURE__*/
  style({
    prop: 'maxWidth',
    transform: getDimension,
    variants: 'widths'
  });
  var maxHeight =
  /*#__PURE__*/
  style({
    prop: 'maxHeight',
    transform: getDimension,
    variants: 'heights'
  });
  var minWidth =
  /*#__PURE__*/
  style({
    prop: 'minWidth',
    transform: getDimension,
    variants: 'widths'
  });
  var minHeight =
  /*#__PURE__*/
  style({
    prop: 'minHeight',
    transform: getDimension,
    variants: 'heights'
  });
  var dimensions =
  /*#__PURE__*/
  composeStyles$1(width, height, maxWidth, maxHeight, minWidth, minHeight); // Space

  var display =
  /*#__PURE__*/
  style({
    prop: 'display'
  });
  var alignItems =
  /*#__PURE__*/
  style({
    prop: 'alignItems'
  });
  var alignContent =
  /*#__PURE__*/
  style({
    prop: 'alignContent'
  });
  var justifyContent =
  /*#__PURE__*/
  style({
    prop: 'justifyContent'
  });
  var flexWrap =
  /*#__PURE__*/
  style({
    prop: 'flexWrap'
  });
  var flexBasis =
  /*#__PURE__*/
  style({
    prop: 'flexBasis',
    transform: getDimension
  });
  var flexDirection =
  /*#__PURE__*/
  style({
    prop: 'flexDirection'
  });
  var flex =
  /*#__PURE__*/
  style({
    prop: 'flex'
  });
  var justifySelf =
  /*#__PURE__*/
  style({
    prop: 'justifySelf'
  });
  var alignSelf =
  /*#__PURE__*/
  style({
    prop: 'alignSelf'
  });
  var order =
  /*#__PURE__*/
  style({
    prop: 'order'
  });
  var flexboxes =
  /*#__PURE__*/
  composeStyles$1(display, alignItems, alignContent, justifyContent, flexWrap, flexBasis, flexDirection, flex, justifySelf, alignSelf, order); // Background

  var background =
  /*#__PURE__*/
  style({
    prop: 'background'
  });
  var backgroundColor =
  /*#__PURE__*/
  style({
    prop: 'backgroundColor',
    variants: 'colors'
  });
  var backgroundImage =
  /*#__PURE__*/
  style({
    prop: 'backgroundImage'
  });
  var backgroundSize =
  /*#__PURE__*/
  style({
    prop: 'backgroundSize'
  });
  var backgroundPosition =
  /*#__PURE__*/
  style({
    prop: 'backgroundPosition'
  });
  var backgroundRepeat =
  /*#__PURE__*/
  style({
    prop: 'backgroundRepeat'
  });
  var backgrounds =
  /*#__PURE__*/
  composeStyles$1(background, backgroundColor, backgroundImage, backgroundSize, backgroundPosition, backgroundRepeat); // Position

  var position =
  /*#__PURE__*/
  style({
    prop: 'position'
  });
  var zIndex =
  /*#__PURE__*/
  style({
    prop: 'zIndex',
    variants: 'zIndexes'
  });
  var top =
  /*#__PURE__*/
  style({
    prop: 'top',
    transform: px
  });
  var right =
  /*#__PURE__*/
  style({
    prop: 'right',
    transform: px
  });
  var bottom =
  /*#__PURE__*/
  style({
    prop: 'bottom',
    transform: px
  });
  var left =
  /*#__PURE__*/
  style({
    prop: 'left',
    transform: px
  });
  var positions =
  /*#__PURE__*/
  composeStyles$1(position, zIndex, top, right, bottom, left); // Border

  var getBorder = function getBorder(n) {
    return num(n) && n > 0 ? n + "px solid" : n;
  };

  var border =
  /*#__PURE__*/
  style({
    prop: 'border',
    variants: 'borders',
    transform: getBorder
  });
  var borderTop =
  /*#__PURE__*/
  style({
    prop: 'borderTop',
    variants: 'borders',
    transform: getBorder
  });
  var borderRight =
  /*#__PURE__*/
  style({
    prop: 'borderRight',
    variants: 'borders',
    transform: getBorder
  });
  var borderBottom =
  /*#__PURE__*/
  style({
    prop: 'borderBottom',
    variants: 'borders',
    transform: getBorder
  });
  var borderLeft =
  /*#__PURE__*/
  style({
    prop: 'borderLeft',
    variants: 'borders',
    transform: getBorder
  });
  var borderColor =
  /*#__PURE__*/
  style({
    prop: 'borderColor',
    variants: 'colors'
  });
  var borderRadius$1 =
  /*#__PURE__*/
  style({
    prop: 'borderRadius',
    variants: 'radii',
    transform: px
  });
  var boxShadow =
  /*#__PURE__*/
  style({
    prop: 'boxShadow',
    variants: 'shadows'
  });
  var borders =
  /*#__PURE__*/
  composeStyles$1(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderRadius$1, boxShadow);
  var system =
  /*#__PURE__*/
  composeStyles$1(basics, typography, dimensions, space, flexboxes, backgrounds, positions, borders);

  var styles = /*#__PURE__*/Object.freeze({
    opacity: opacity,
    overflow: overflow,
    basics: basics,
    fontFamily: fontFamily$1,
    fontSize: fontSize,
    lineHeight: lineHeight,
    fontWeight: fontWeight,
    textAlign: textAlign,
    letterSpacing: letterSpacing,
    color: color,
    typography: typography,
    width: width,
    height: height,
    maxWidth: maxWidth,
    maxHeight: maxHeight,
    minWidth: minWidth,
    minHeight: minHeight,
    dimensions: dimensions,
    space: space,
    display: display,
    alignItems: alignItems,
    alignContent: alignContent,
    justifyContent: justifyContent,
    flexWrap: flexWrap,
    flexBasis: flexBasis,
    flexDirection: flexDirection,
    flex: flex,
    justifySelf: justifySelf,
    alignSelf: alignSelf,
    order: order,
    flexboxes: flexboxes,
    background: background,
    backgroundColor: backgroundColor,
    backgroundImage: backgroundImage,
    backgroundSize: backgroundSize,
    backgroundPosition: backgroundPosition,
    backgroundRepeat: backgroundRepeat,
    backgrounds: backgrounds,
    position: position,
    zIndex: zIndex,
    top: top,
    right: right,
    bottom: bottom,
    left: left,
    positions: positions,
    border: border,
    borderTop: borderTop,
    borderRight: borderRight,
    borderBottom: borderBottom,
    borderLeft: borderLeft,
    borderColor: borderColor,
    borderRadius: borderRadius$1,
    boxShadow: boxShadow,
    borders: borders,
    system: system
  });

  function createComponent(getConfig) {
    var _getConfig = getConfig(),
        name = _getConfig.name,
        style = _getConfig.style,
        _getConfig$omitProps = _getConfig.omitProps,
        omitProps = _getConfig$omitProps === void 0 ? [] : _getConfig$omitProps,
        _getConfig$defaultPro = _getConfig.defaultProps,
        defaultProps = _getConfig$defaultPro === void 0 ? {} : _getConfig$defaultPro,
        _getConfig$propTypes = _getConfig.propTypes,
        propTypes = _getConfig$propTypes === void 0 ? {} : _getConfig$propTypes,
        _getConfig$render = _getConfig.render,
        _render = _getConfig$render === void 0 ? function (_ref) {
      var Component = _ref.Component,
          props = _objectWithoutPropertiesLoose(_ref, ["Component"]);

      return React.createElement(Component, props);
    } : _getConfig$render,
        _getConfig$defaultCom = _getConfig.defaultComponent,
        defaultComponent = _getConfig$defaultCom === void 0 ? 'div' : _getConfig$defaultCom,
        _getConfig$system = _getConfig.system,
        system$$1 = _getConfig$system === void 0 ? system : _getConfig$system,
        _getConfig$applySyste = _getConfig.applySystem,
        applySystem = _getConfig$applySyste === void 0 ? function (system$$1) {
      return function (props) {
        return {
          '&&': system$$1(props)
        };
      };
    } : _getConfig$applySyste,
        injectTheme = _getConfig.injectTheme,
        InnerComponentFromConfig = _getConfig.InnerComponent;

    var omittedProps = ['theme'].concat(system$$1 ? system$$1.meta.props : {}, omitProps);
    var baseClassName = "sui-" + name;

    var InnerComponent = InnerComponentFromConfig ||
    /*#__PURE__*/
    function (_React$Component) {
      _inheritsLoose(Component, _React$Component);

      function Component() {
        return _React$Component.apply(this, arguments) || this;
      }

      var _proto = Component.prototype;

      _proto.render = function render() {
        var _this$props = this.props,
            className = _this$props.className,
            forwardedAs = _this$props.forwardedAs,
            as = _this$props.as,
            theme = _this$props.theme,
            forwardedRef = _this$props.forwardedRef,
            props = _objectWithoutPropertiesLoose(_this$props, ["className", "forwardedAs", "as", "theme", "forwardedRef"]);

        var Component = forwardedAs || as || defaultComponent;

        var renderProps = _objectSpread({
          ref: forwardedRef,
          Component: Component,
          className: className ? baseClassName + " " + className : baseClassName
        }, omit(props, omittedProps));

        if (injectTheme) {
          renderProps.theme = theme;
        }

        return _render(renderProps);
      };

      return Component;
    }(React.Component);

    InnerComponent = injectTheme ? scStyled.withTheme(InnerComponent) : InnerComponent;
    InnerComponent.displayName = "sui-" + name;

    function forwardRef(props, ref) {
      return React.createElement(InnerComponent, _extends({}, props, {
        forwardedRef: ref
      }));
    }

    forwardRef.displayName = InnerComponent.displayName;
    var RefComponent = React.forwardRef(forwardRef);
    RefComponent.displayName = InnerComponent.displayName; // eslint-disable-next-line no-underscore-dangle

    RefComponent.__smoothUIComponent = true;
    var StyledComponent = styled(RefComponent).withConfig({
      componentId: "kgmrda-0"
    })(["", ";", ";"], style, applySystem && applySystem(system$$1));
    StyledComponent.propTypes = _objectSpread({
      theme: PropTypes.object
    }, system$$1 ? system$$1.propTypes : {}, propTypes);
    StyledComponent.defaultProps = _objectSpread({
      theme: theme
    }, defaultProps);
    return StyledComponent;
  }

  var Alert =
  /*#__PURE__*/
  createComponent(function () {
    return {
      name: 'alert',
      omitProps: ['variant'],
      style: scStyled.css(["position:relative;padding:", " ", ";margin-bottom:", ";border:1px solid transparent;border-radius:", ";", ";"], th('alertPaddingY'), th('alertPaddingX'), th('alertMarginBottom'), th('borderRadius'), function (p) {
        return p.variant && mixin('alertVariant', p.variant)(p);
      }),
      propTypes: {
        children: PropTypes.node,
        variant: PropTypes.string
      },
      defaultProps: {
        variant: 'primary'
      }
    };
  });

  var Box =
  /*#__PURE__*/
  createComponent(function () {
    return {
      name: 'box'
    };
  });

  var Breakpoint =
  /*#__PURE__*/
  createComponent(function () {
    return {
      name: 'breakpoint',
      omitProps: ['up', 'down'],
      style: scStyled.css(["display:none;", ";", ";"], function (p) {
        return p.up && up(p.up, 'display: block;');
      }, function (p) {
        return p.down && down(p.down, 'display: block;');
      }),
      propTypes: {
        children: PropTypes.node,
        up: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),
        down: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl'])
      }
    };
  });

  var sizeStyle = {
    sm:
    /*#__PURE__*/
    scStyled.css(["padding:", " ", ";font-size:", ";border-radius:", ";line-height:", ";"],
    /*#__PURE__*/
    th('btnPaddingYSm'),
    /*#__PURE__*/
    th('btnPaddingXSm'),
    /*#__PURE__*/
    th('fontSizeSm'),
    /*#__PURE__*/
    th('borderRadiusSm'),
    /*#__PURE__*/
    th('btnLineHeightSm')),
    md:
    /*#__PURE__*/
    scStyled.css(["padding:", " ", ";font-size:", ";border-radius:", ";line-height:", ";"],
    /*#__PURE__*/
    th('btnPaddingY'),
    /*#__PURE__*/
    th('btnPaddingX'),
    /*#__PURE__*/
    th('fontSizeBase'),
    /*#__PURE__*/
    th('borderRadius'),
    /*#__PURE__*/
    th('btnLineHeight')),
    lg:
    /*#__PURE__*/
    scStyled.css(["padding:", " ", ";font-size:", ";border-radius:", ";line-height:", ";"],
    /*#__PURE__*/
    th('btnPaddingYLg'),
    /*#__PURE__*/
    th('btnPaddingXLg'),
    /*#__PURE__*/
    th('fontSizeLg'),
    /*#__PURE__*/
    th('borderRadiusLg'),
    /*#__PURE__*/
    th('btnLineHeightLg'))
  };
  var Button =
  /*#__PURE__*/
  createComponent(function () {
    return {
      name: 'button',
      defaultComponent: 'button',
      omitProps: ['size', 'variant'],
      style: scStyled.css(["display:inline-block;padding:", " ", ";z-index:", ";border-radius:", ";font-size:", ";line-height:", ";border-width:", ";cursor:pointer;", ";text-decoration:none;&:disabled{opacity:", ";}", ";", ";"], th('btnPaddingY'), th('btnPaddingX'), th('zIndexControl'), th('borderRadius'), th('fontSizeBase'), th('btnLineHeight'), th('btnBorderWidth'), th('transitionBase'), th('btnDisabledOpacity'), function (p) {
        return p.size && sizeStyle[p.size];
      }, function (p) {
        return p.variant && mixin('btnVariant', p.variant)(p);
      }),
      propTypes: {
        children: PropTypes.node,
        disabled: PropTypes.bool,
        size: PropTypes.oneOf(['sm', 'md', 'lg']),
        variant: PropTypes.string
      },
      defaultProps: {
        size: 'md',
        variant: 'primary'
      }
    };
  });

  var SwitchState =
  /*#__PURE__*/
  function (_React$Component) {
    _inheritsLoose(SwitchState, _React$Component);

    function SwitchState() {
      var _this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.state = {
        focused: false,
        checked: _this.props.checked || _this.props.defaultChecked || false
      };

      _this.handleChange = function (event) {
        if (_this.props.checked === undefined) {
          _this.setState({
            checked: event.currentTarget.checked
          });
        }

        if (_this.props.onChange) {
          _this.props.onChange(event);
        }
      };

      _this.handleFocus = function (event) {
        _this.setState({
          focused: true
        });

        if (_this.props.onFocus) {
          _this.props.onFocus(event);
        }
      };

      _this.handleBlur = function (event) {
        _this.setState({
          focused: false
        });

        if (_this.props.onBlur) {
          _this.props.onBlur(event);
        }
      };

      return _this;
    }

    SwitchState.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
      if (props.checked !== undefined && props.checked !== state.checked) {
        return _objectSpread({}, state, {
          checked: props.checked
        });
      }

      return state;
    };

    var _proto = SwitchState.prototype;

    _proto.render = function render() {
      var _this$props = this.props,
          checked = _this$props.checked,
          children = _this$props.children,
          defaultChecked = _this$props.defaultChecked,
          onChange = _this$props.onChange,
          onBlur = _this$props.onBlur,
          onFocus = _this$props.onFocus,
          style = _this$props.style,
          props = _objectWithoutPropertiesLoose(_this$props, ["checked", "children", "defaultChecked", "onChange", "onBlur", "onFocus", "style"]);

      return this.props.children({
        focused: this.state.focused,
        checked: this.state.checked,
        disabled: props.disabled,
        input: _objectSpread({
          checked: this.state.checked,
          onChange: this.handleChange,
          onFocus: this.handleFocus,
          onBlur: this.handleBlur,
          style: _objectSpread({
            position: 'absolute',
            margin: 0,
            padding: 0,
            top: 0,
            right: 0,
            left: 0,
            bottom: 0,
            opacity: 0,
            width: '100%',
            height: '100%',
            zIndex: 10
          }, style)
        }, props)
      });
    };

    return SwitchState;
  }(React.Component);

  var sizeStyle$1 = {
    sm:
    /*#__PURE__*/
    scStyled.css([".sui-checkbox-content{border-radius:", ";width:0.875rem;height:0.875rem;}.sui-checkbox-check{width:8px;height:8px;}"],
    /*#__PURE__*/
    th('borderRadiusSm')),
    md:
    /*#__PURE__*/
    scStyled.css([".sui-checkbox-content{border-radius:", ";width:1rem;height:1rem;}.sui-checkbox-check{width:10px;height:10px;}"],
    /*#__PURE__*/
    th('borderRadius')),
    lg:
    /*#__PURE__*/
    scStyled.css([".sui-checkbox-content{border-radius:", ";width:1.25rem;height:1.25rem;}.sui-checkbox-check{width:12px;height:12px;}"],
    /*#__PURE__*/
    th('borderRadiusLg'))
  };
  var containerSystem =
  /*#__PURE__*/
  composeStyles$1(basics, dimensions, space, flexboxes, positions);
  var contentSystem =
  /*#__PURE__*/
  composeStyles$1(dimensions, backgrounds, borders);
  var Checkbox =
  /*#__PURE__*/
  createComponent(function () {
    return {
      name: 'checkbox',
      system: composeStyles$1(containerSystem, contentSystem),
      applySystem: null,
      render: function render(_ref) {
        var Component = _ref.Component,
            ref = _ref.ref,
            className = _ref.className,
            size = _ref.size,
            props = _objectWithoutPropertiesLoose(_ref, ["Component", "ref", "className", "size"]);

        return React.createElement(SwitchState, props, function (_ref2) {
          var input = _ref2.input;
          return React.createElement(Component, {
            className: className
          }, React.createElement("input", _extends({
            ref: ref,
            type: "checkbox"
          }, input)), React.createElement("div", {
            className: "sui-checkbox-content"
          }, React.createElement("svg", {
            className: "sui-checkbox-check",
            viewBox: "0 0 512 512"
          }, React.createElement("path", {
            fill: "currentColor",
            d: "M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"
          }))));
        });
      },
      style: scStyled.css(["display:inline-flex;align-items:center;justify-content:center;position:relative;width:1.5rem;height:1.5rem;z-index:", ";.sui-checkbox-check{pointer-events:none;transform:scale(0);transform-origin:center;color:", ";", ";}.sui-checkbox-content{display:flex;align-items:center;justify-content:center;width:1rem;height:1rem;background-color:", ";border-radius:", ";border-style:solid;border-width:", ";border-color:", ";", ";}input:checked + .sui-checkbox-content{background-color:", ";border-color:transparent;svg{transform:scale(1);}}input:focused + .sui-checkbox-content{", ";}input:disabled + .sui-checkbox-content{background-color:", ";}", ";", ";.sui-checkbox-content{", ";}"], th('zIndexControl'), th('white'), th('transitionBase'), th('inputBgColor'), th('borderRadius'), th('inputBorderWidth'), th('inputBorderColor'), th('transitionBase'), th('primary'), mixin('controlFocus'), th('inputDisabledBgColor'), function (p) {
        return sizeStyle$1[p.size];
      }, containerSystem, contentSystem),
      propTypes: {
        checked: PropTypes.bool,
        disabled: PropTypes.bool,
        onChange: PropTypes.func,
        size: PropTypes.oneOf(['sm', 'md', 'lg']),
        value: PropTypes.string
      },
      defaultProps: {
        size: 'md'
      }
    };
  });

  var common = {
    position: 'relative',
    width: '100%',
    minHeight: '1px'
  };

  function isValidSize(size) {
    return size || size === 0;
  }

  function getSizeWidth(size, nbColumns) {
    return Math.round(size / nbColumns * Math.pow(10, 6)) / Math.pow(10, 4) + "%";
  }

  function getOffsetStyle(offsetSize, nbColumns) {
    if (isValidSize(offsetSize)) {
      var marginLeft = getSizeWidth(offsetSize, nbColumns);
      return {
        marginLeft: marginLeft
      };
    }

    return null;
  }

  function getBreakPointStyle(breakpoint, width, props) {
    var size = props[breakpoint];
    if (!isValidSize(size)) return null;
    var nbColumns = props.theme.gridColumns;
    var mediaQuery = mediaMinWidth(width);

    var media = function media(style$$1) {
      var _ref;

      return width === 0 ? style$$1 : (_ref = {}, _ref[mediaQuery] = style$$1, _ref);
    };

    if (size === true) {
      return _objectSpread({}, common, media({
        flexBasis: 0,
        flexGrow: 1,
        maxWidth: '100%'
      }));
    }

    if (size === 'auto') {
      return _objectSpread({}, common, media({
        flex: "0 0 auto",
        maxWidth: 'none',
        width: 'auto'
      }));
    }

    var sizeWidth = getSizeWidth(size, nbColumns);
    return _objectSpread({}, common, media(_objectSpread({
      flex: "0 0 " + sizeWidth,
      maxWidth: sizeWidth
    }, getOffsetStyle(props["o" + breakpoint], nbColumns))));
  }

  var getStyleFromProps = function getStyleFromProps(props) {
    var gutter = px(prop('gutter', 'gridGutter')(props));
    var breakpointsKeys = Object.keys(props.theme.breakpoints);
    var style$$1 = {
      paddingLeft: gutter,
      paddingRight: gutter,
      flexBasis: 0,
      flexGrow: 1,
      maxWidth: '100%'
    };
    var index = -1; // eslint-disable-next-line no-plusplus

    while (++index < breakpointsKeys.length) {
      var breakpoint = breakpointsKeys[index];
      Object.assign(style$$1, getBreakPointStyle(breakpoint, props.theme.breakpoints[breakpoint], props));
    }

    return style$$1;
  };

  var Col =
  /*#__PURE__*/
  createComponent(function () {
    return {
      name: 'col',
      omitProps: ['xs', 'sm', 'md', 'lg', 'xl', 'oxs', 'osm', 'omd', 'olg', 'oxl'],
      style: getStyleFromProps,
      propTypes: {
        children: PropTypes.node,
        gutter: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
        xs: PropTypes.oneOfType([PropTypes.bool, PropTypes.string, PropTypes.number]),
        sm: PropTypes.oneOfType([PropTypes.bool, PropTypes.string, PropTypes.number]),
        md: PropTypes.oneOfType([PropTypes.bool, PropTypes.string, PropTypes.number]),
        lg: PropTypes.oneOfType([PropTypes.bool, PropTypes.string, PropTypes.number]),
        xl: PropTypes.oneOfType([PropTypes.bool, PropTypes.string, PropTypes.number]),
        oxs: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
        osm: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
        omd: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
        olg: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
        oxl: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
      }
    };
  });
  Col.Split =
  /*#__PURE__*/
  createComponent(function () {
    return {
      name: 'col-split',
      style: function style$$1() {
        return {
          width: '100% !important'
        };
      }
    };
  });

  var ControlFeedback =
  /*#__PURE__*/
  createComponent(function () {
    return {
      name: 'control-feedback',
      omitProps: ['valid'],
      style: scStyled.css(["width:100%;margin-top:0.25rem;font-size:80%;color:", ";"], function (p) {
        return p.valid ? th('success')(p) : th('danger')(p);
      }),
      propTypes: {
        children: PropTypes.node,
        valid: PropTypes.bool.isRequired
      }
    };
  });

  var FormCheck =
  /*#__PURE__*/
  createComponent(function () {
    return {
      name: 'form-check',
      omitProps: ['inline'],
      style: scStyled.css(["display:flex;align-items:center;", ";"], function (p) {
        return p.inline && scStyled.css(["display:inline-flex;margin-right:0.75rem;"]);
      }),
      propTypes: {
        children: PropTypes.node,
        inline: PropTypes.bool
      }
    };
  });

  var FormCheckLabel =
  /*#__PURE__*/
  createComponent(function () {
    return {
      name: 'form-check-label',
      defaultComponent: 'label',
      style: scStyled.css(["padding-left:0.25rem;[class*='disabled'] ~ &{color:", ";}"], th('inputDisabledText')),
      propTypes: {
        children: PropTypes.node
      }
    };
  });

  var FormGroup =
  /*#__PURE__*/
  createComponent(function () {
    return {
      name: 'form-group',
      style: scStyled.css(["margin-bottom:1rem;"]),
      propTypes: {
        children: PropTypes.node
      }
    };
  });

  var styleBreakpoints = function styleBreakpoints(p) {
    var breakpoints = th('breakpoints')(p);
    var gridMaxWidths = th('gridMaxWidths')(p);

    var style$$1 = function style$$1(breakpoint) {
      var width = breakpoints[breakpoint];

      var media = function media(s) {
        var _ref;

        return width === 0 ? s : (_ref = {}, _ref[mediaMinWidth(width)] = s, _ref);
      };

      return media({
        maxWidth: gridMaxWidths[breakpoint]
      });
    };

    return Object.keys(breakpoints).reduce(function (obj, breakpoint) {
      return Object.assign(obj, style$$1(breakpoint));
    }, {});
  };

  var Grid =
  /*#__PURE__*/
  createComponent(function () {
    return {
      name: 'grid',
      omitProps: ['gutter', 'fluid'],
      style: function style$$1(p) {
        var gutter = px(prop('gutter', 'gridGutter')(p));
        return _objectSpread({
          width: '100%',
          paddingRight: gutter,
          paddingLeft: gutter,
          marginRight: 'auto',
          marginLeft: 'auto'
        }, p.fluid ? null : styleBreakpoints(p));
      },
      propTypes: {
        children: PropTypes.node,
        gutter: PropTypes.number,
        fluid: PropTypes.bool
      }
    };
  });

  var sizeStyle$2 = {
    sm:
    /*#__PURE__*/
    scStyled.css(["padding:", " ", ";font-size:", ";border-radius:", ";"],
    /*#__PURE__*/
    th('inputPaddingYSm'),
    /*#__PURE__*/
    th('inputPaddingXSm'),
    /*#__PURE__*/
    th('fontSizeSm'),
    /*#__PURE__*/
    th('borderRadiusSm')),
    md:
    /*#__PURE__*/
    scStyled.css(["padding:", " ", ";font-size:", ";border-radius:", ";"],
    /*#__PURE__*/
    th('inputPaddingY'),
    /*#__PURE__*/
    th('inputPaddingX'),
    /*#__PURE__*/
    th('fontSizeBase'),
    /*#__PURE__*/
    th('borderRadius')),
    lg:
    /*#__PURE__*/
    scStyled.css(["padding:", " ", ";font-size:", ";border-radius:", ";"],
    /*#__PURE__*/
    th('inputPaddingYLg'),
    /*#__PURE__*/
    th('inputPaddingXLg'),
    /*#__PURE__*/
    th('fontSizeLg'),
    /*#__PURE__*/
    th('borderRadiusLg'))
  };
  var validStyle =
  /*#__PURE__*/
  scStyled.css(["border-color:", ";&:focus{border-color:", ";box-shadow:", ";}"],
  /*#__PURE__*/
  th('success'),
  /*#__PURE__*/
  th('success'),
  /*#__PURE__*/
  mixin('controlFocusBoxShadow', 'success'));
  var invalidStyle =
  /*#__PURE__*/
  scStyled.css(["border-color:", ";&:focus{border-color:", ";box-shadow:", ";}"],
  /*#__PURE__*/
  th('danger'),
  /*#__PURE__*/
  th('danger'),
  /*#__PURE__*/
  mixin('controlFocusBoxShadow', 'danger'));
  var controlStyle =
  /*#__PURE__*/
  scStyled.css(["display:block;width:100%;&:focus{border-color:", ";box-shadow:", ";}", ";"],
  /*#__PURE__*/
  th('controlFocusBorderColor'),
  /*#__PURE__*/
  mixin('controlFocusBoxShadow', 'primary'), function (p) {
    switch (p.valid) {
      case true:
        return validStyle;

      case false:
        return invalidStyle;

      default:
        return null;
    }
  });
  var Input =
  /*#__PURE__*/
  createComponent(function () {
    return {
      name: 'input',
      defaultComponent: 'input',
      omitProps: ['control', 'size', 'valid'],
      style: scStyled.css(["display:inline-block;border-width:", ";border-color:", ";border-style:solid;line-height:", ";color:", ";", ";background-color:", ";&[type='number']{padding-right:6px;}&::placeholder{color:", ";}&:focus{", ";}&:disabled{background-color:", ";color:", ";}", ";", ";"], th('inputBorderWidth'), th('inputBorderColor'), th('inputLineHeight'), th('inputTextColor'), th('transitionBase'), th('inputBgColor'), th('inputPlaceholderText'), mixin('controlFocus'), th('inputDisabledBgColor'), th('inputDisabledText'), function (p) {
        return p.size && sizeStyle$2[p.size];
      }, function (p) {
        return p.control && controlStyle;
      }),
      propTypes: {
        control: PropTypes.bool,
        size: PropTypes.oneOf(['sm', 'md', 'lg']),
        valid: PropTypes.bool
      },
      defaultProps: {
        size: 'md'
      }
    };
  });

  /* eslint-disable jsx-a11y/label-has-for */
  var Label =
  /*#__PURE__*/
  createComponent(function () {
    return {
      name: 'label',
      defaultComponent: 'label',
      style: scStyled.css(["display:inline-block;margin-bottom:0.5rem;"]),
      propTypes: {
        children: PropTypes.node
      }
    };
  });

  function unwrapExports (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x.default : x;
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var toArray = function toArray(a) {
    var ret = Array(a.length);

    for (var i = 0; i < a.length; ++i) {
      ret[i] = a[i];
    }

    return ret;
  };

  var tabSort = function tabSort(a, b) {
    var tabDiff = a.tabIndex - b.tabIndex;
    var indexDiff = a.index - b.index;

    if (tabDiff) {
      if (!a.tabIndex) return 1;
      if (!b.tabIndex) return -1;
    }

    return tabDiff || indexDiff;
  };
  var orderByTabIndex = function orderByTabIndex(nodes) {
    return toArray(nodes).map(function (node, index) {
      return {
        node: node,
        index: index,
        tabIndex: node.tabIndex
      };
    }).filter(function (data) {
      return data.tabIndex >= 0;
    }).sort(tabSort);
  };

  var tabbables = ['button:enabled:not([readonly])', 'select:enabled:not([readonly])', 'textarea:enabled:not([readonly])', 'input:enabled:not([readonly])', 'a[href]', 'area[href]', 'iframe', 'object', 'embed', '[tabindex]', '[contenteditable]', '[autofocus]'];

  var FOCUS_GROUP = 'data-focus-lock';
  var FOCUS_DISABLED = 'data-focus-lock-disabled';
  var FOCUS_AUTO = 'data-autofocus-inside';

  var getFocusables = function getFocusables(parents) {
    return parents.reduce(function (acc, parent) {
      return acc.concat(toArray(parent.querySelectorAll(tabbables.join(','))));
    }, []);
  };
  var getParentAutofocusables = function getParentAutofocusables(parent) {
    var parentFocus = parent.querySelectorAll('[' + FOCUS_AUTO + ']');
    return toArray(parentFocus).map(function (node) {
      return getFocusables([node]);
    }).reduce(function (acc, nodes) {
      return acc.concat(nodes);
    }, []);
  };

  var isElementHidden = function isElementHidden(computedStyle) {
    if (!computedStyle || !computedStyle.getPropertyValue) {
      return false;
    }

    return computedStyle.getPropertyValue('display') === 'none' || computedStyle.getPropertyValue('visibility') === 'hidden';
  };

  var isVisible = function isVisible(node) {
    return !node || node === document || !isElementHidden(window.getComputedStyle(node, null)) && isVisible(node.parentNode);
  };
  var notHiddenInput = function notHiddenInput(node) {
    return node.tagName !== 'INPUT' || node.type !== 'hidden';
  };

  var getParents = function getParents(node) {
    var parents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    parents.push(node);

    if (node.parentNode) {
      getParents(node.parentNode, parents);
    }

    return parents;
  };

  var getCommonParent = function getCommonParent(nodea, nodeb) {
    var parentsA = getParents(nodea);
    var parentsB = getParents(nodeb);

    for (var i = 0; i < parentsA.length; i += 1) {
      var currentParent = parentsA[i];

      if (parentsB.indexOf(currentParent) >= 0) {
        return currentParent;
      }
    }

    return false;
  };
  var filterFocusable = function filterFocusable(nodes) {
    return toArray(nodes).filter(function (node) {
      return isVisible(node);
    }).filter(function (node) {
      return notHiddenInput(node);
    });
  };
  var getTabbableNodes = function getTabbableNodes(topNodes) {
    return orderByTabIndex(filterFocusable(getFocusables(topNodes)));
  };
  var parentAutofocusables = function parentAutofocusables(topNode) {
    return filterFocusable(getParentAutofocusables(topNode));
  };

  var isRadio = function isRadio(node) {
    return node.tagName === 'INPUT' && node.type === 'radio';
  };

  var findSelectedRadio = function findSelectedRadio(node, nodes) {
    return nodes.filter(isRadio).filter(function (el) {
      return el.name === node.name;
    }).filter(function (el) {
      return el.checked;
    })[0] || node;
  };

  var pickFirstFocus = function pickFirstFocus(nodes) {
    if (nodes[0] && nodes.length > 1) {
      if (isRadio(nodes[0]) && nodes[0].name) {
        return findSelectedRadio(nodes[0], nodes);
      }
    }

    return nodes[0];
  };

  var _typeof$1 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };

  var filterNested = function filterNested(nodes) {
    var l = nodes.length;

    for (var i = 0; i < l; i += 1) {
      var _loop = function _loop(j) {
        if (i !== j) {
          if (nodes[i].contains(nodes[j])) {
            return {
              v: filterNested(nodes.filter(function (x) {
                return x !== nodes[j];
              }))
            };
          }
        }
      };

      for (var j = 0; j < l; j += 1) {
        var _ret = _loop(j);

        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof$1(_ret)) === "object") return _ret.v;
      }
    }

    return nodes;
  };

  var getTopParent = function getTopParent(node) {
    return node.parentNode ? getTopParent(node.parentNode) : node;
  };

  var getAllAffectedNodes = function getAllAffectedNodes(node) {
    var group = node.getAttribute(FOCUS_GROUP);

    if (group) {
      return filterNested(toArray(getTopParent(node).querySelectorAll('[' + FOCUS_GROUP + '="' + group + '"]:not([' + FOCUS_DISABLED + '="disabled"])')));
    }

    return [node];
  };

  var findAutoFocused = function findAutoFocused(autoFocusables) {
    return function (node) {
      return !!node.autofocus || node.dataset && !!node.dataset.autofocus || autoFocusables.indexOf(node) >= 0;
    };
  };

  var newFocus = function newFocus(innerNodes, outerNodes, activeElement, lastNode, autoFocused) {
    var cnt = innerNodes.length;
    var firstFocus = innerNodes[0];
    var lastFocus = innerNodes[cnt - 1]; // focus is inside

    if (innerNodes.indexOf(activeElement) >= 0) {
      return undefined;
    }

    var activeIndex = outerNodes.indexOf(activeElement);
    var lastIndex = outerNodes.indexOf(lastNode || activeIndex);
    var lastNodeInside = innerNodes.indexOf(lastNode);
    var indexDiff = activeIndex - lastIndex;
    var firstNodeIndex = outerNodes.indexOf(firstFocus);
    var lastNodeIndex = outerNodes.indexOf(lastFocus); // new focus

    if (activeIndex === -1 || lastNodeInside === -1) {
      return innerNodes.indexOf(autoFocused.length ? pickFirstFocus(autoFocused) : pickFirstFocus(innerNodes));
    } // old focus


    if (!indexDiff && lastNodeInside >= 0) {
      return lastNodeInside;
    } // jump out


    if (indexDiff && Math.abs(indexDiff) > 1) {
      return lastNodeInside;
    } // focus above lock


    if (activeIndex <= firstNodeIndex) {
      return cnt - 1;
    } // focus below lock


    if (activeIndex > lastNodeIndex) {
      return 0;
    } // index is inside tab order, but outside Lock


    if (indexDiff) {
      if (Math.abs(indexDiff) > 1) {
        return lastNodeInside;
      }

      return (cnt + lastNodeInside + indexDiff) % cnt;
    } // do nothing


    return undefined;
  };

  var getTopCommonParent = function getTopCommonParent(activeElement, entry, entries) {
    var topCommon = entry;
    entries.forEach(function (subEntry) {
      var common = getCommonParent(activeElement, subEntry);

      if (common) {
        if (common.contains(topCommon)) {
          topCommon = common;
        } else {
          topCommon = getCommonParent(common, topCommon);
        }
      }
    });
    return topCommon;
  };

  var allParentAutofocusables = function allParentAutofocusables(entries) {
    return entries.reduce(function (acc, node) {
      return acc.concat(parentAutofocusables(node));
    }, []);
  };

  var notAGuard = function notAGuard(node) {
    return !(node.dataset && node.dataset.focusGuard);
  };

  var getFocusMerge = function getFocusMerge(topNode, lastNode) {
    var activeElement = document.activeElement;
    var entries = getAllAffectedNodes(topNode).filter(notAGuard);
    var commonParent = getTopCommonParent(activeElement || topNode, topNode, entries);
    var innerElements = getTabbableNodes(entries).filter(function (_ref) {
      var node = _ref.node;
      return notAGuard(node);
    });

    if (!innerElements[0]) {
      return undefined;
    }

    var innerNodes = innerElements.map(function (_ref2) {
      var node = _ref2.node;
      return node;
    });
    var outerNodes = getTabbableNodes([commonParent]).map(function (_ref3) {
      var node = _ref3.node;
      return node;
    });
    var newId = newFocus(innerNodes, outerNodes, activeElement, lastNode, innerNodes.filter(findAutoFocused(allParentAutofocusables(entries))));

    if (newId === undefined) {
      return newId;
    }

    return innerElements[newId];
  };

  var focusOn = function focusOn(target) {
    target.focus();

    if (target.contentWindow) {
      target.contentWindow.focus();
    }
  };
  var guardCount = 0;
  var lockDisabled = false;
  var setFocus = (function (topNode, lastNode) {
    var focusable = getFocusMerge(topNode, lastNode);

    if (lockDisabled) {
      return;
    }

    if (focusable) {
      if (guardCount > 2) {
        if (process.env.NODE_ENV !== 'production') {
          // eslint-disable-next-line no-console
          console.error('FocusLock: focus-fighting detected. Only one focus management system could be active. ' + 'See https://github.com/theKashey/focus-lock/#focus-fighting');
          lockDisabled = true;
          setTimeout(function () {
            lockDisabled = false;
          }, 1);
        }

        return;
      }

      guardCount++;
      focusOn(focusable.node);
      guardCount--;
    }
  });

  //
  var shallowequal = function shallowEqual(objA, objB, compare, compareContext) {
    var ret = compare ? compare.call(compareContext, objA, objB) : void 0;

    if (ret !== void 0) {
      return !!ret;
    }

    if (objA === objB) {
      return true;
    }

    if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
      return false;
    }

    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);

    if (keysA.length !== keysB.length) {
      return false;
    }

    var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB); // Test for A's keys different from B.

    for (var idx = 0; idx < keysA.length; idx++) {
      var key = keysA[idx];

      if (!bHasOwnProperty(key)) {
        return false;
      }

      var valueA = objA[key];
      var valueB = objB[key];
      ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;

      if (ret === false || ret === void 0 && valueA !== valueB) {
        return false;
      }
    }

    return true;
  };

  function _interopDefault$1(ex) {
    return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
  }



  var React__default =
  /*#__PURE__*/
  _interopDefault$1(React);

  var shallowEqual =
  /*#__PURE__*/
  _interopDefault$1(
  /*#__PURE__*/
  shallowequal);

  function _classCallCheck$1(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn$1(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits$1(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  function withSideEffect(reducePropsToState, handleStateChangeOnClient) {
    if (typeof reducePropsToState !== 'function') {
      throw new Error('Expected reducePropsToState to be a function.');
    }

    if (typeof handleStateChangeOnClient !== 'function') {
      throw new Error('Expected handleStateChangeOnClient to be a function.');
    }

    function getDisplayName(WrappedComponent) {
      return WrappedComponent.displayName || WrappedComponent.name || 'Component';
    }

    return function wrap(WrappedComponent) {
      if (typeof WrappedComponent !== 'function') {
        throw new Error('Expected WrappedComponent to be a React component.');
      }

      var mountedInstances = [];
      var state = void 0;

      function emitChange() {
        state = reducePropsToState(mountedInstances.map(function (instance) {
          return instance.props;
        }));
        handleStateChangeOnClient(state);
      }

      var SideEffect = function (_Component) {
        _inherits$1(SideEffect, _Component);

        function SideEffect() {
          _classCallCheck$1(this, SideEffect);

          return _possibleConstructorReturn$1(this, _Component.apply(this, arguments));
        }

        SideEffect.peek = function peek() {
          return state;
        }; // Try to use displayName of wrapped component


        SideEffect.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
          return !shallowEqual(nextProps, this.props);
        };

        SideEffect.prototype.componentDidMount = function componentDidMount() {
          mountedInstances.push(this);
          emitChange();
        };

        SideEffect.prototype.componentDidUpdate = function componentDidUpdate() {
          emitChange();
        };

        SideEffect.prototype.componentWillUnmount = function componentWillUnmount() {
          var index = mountedInstances.indexOf(this);
          mountedInstances.splice(index, 1);
          emitChange();
        };

        SideEffect.prototype.render = function render() {
          return React__default.createElement(WrappedComponent, this.props);
        };

        return SideEffect;
      }(React.Component);

      SideEffect.displayName = 'SideEffect(' + getDisplayName(WrappedComponent) + ')';
      return SideEffect;
    };
  }

  var lib = withSideEffect;

  var util = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.deferAction = deferAction;

  function deferAction(action) {
    if (typeof setImmediate !== 'undefined') {
      setImmediate(action);
    } else {
      setTimeout(action, 1);
    }
  }
  });

  unwrapExports(util);
  var util_1 = util.deferAction;

  var Trap = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.onFocus = exports.onBlur = undefined;



  var _react2 =
  /*#__PURE__*/
  _interopRequireDefault(React);



  var _propTypes2 =
  /*#__PURE__*/
  _interopRequireDefault(PropTypes);



  var _reactClientsideEffect2 =
  /*#__PURE__*/
  _interopRequireDefault(lib);



  var _focusLock2 =
  /*#__PURE__*/
  _interopRequireDefault(setFocus);



  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var focusOnBody = function focusOnBody() {
    return document && document.activeElement === document.body;
  };

  var isFreeFocus = function isFreeFocus() {
    return focusOnBody() || (0, setFocus.focusIsHidden)();
  };

  var lastActiveTrap = null;
  var lastActiveFocus = null;
  var lastPortaledElement = null;

  var defaultWhitelist = function defaultWhitelist() {
    return true;
  };

  var focusWhitelisted = function focusWhitelisted(activeElement) {
    return (lastActiveTrap.whiteList || defaultWhitelist)(activeElement);
  };

  var recordPortal = function recordPortal(observerNode, portaledElement) {
    lastPortaledElement = {
      observerNode: observerNode,
      portaledElement: portaledElement
    };
  };

  var focusIsPortaledPair = function focusIsPortaledPair(element) {
    return lastPortaledElement && lastPortaledElement.portaledElement === element;
  };

  var activateTrap = function activateTrap() {
    var result = false;

    if (lastActiveTrap) {
      var _lastActiveTrap = lastActiveTrap,
          observed = _lastActiveTrap.observed,
          persistentFocus = _lastActiveTrap.persistentFocus,
          autoFocus = _lastActiveTrap.autoFocus;
      var workingNode = observed || lastPortaledElement && lastPortaledElement.portaledElement;
      var activeElement = document && document.activeElement;

      if (!activeElement || focusWhitelisted(activeElement)) {
        if (persistentFocus || !isFreeFocus() || !lastActiveFocus && autoFocus) {
          if (workingNode && !((0, setFocus.focusInside)(workingNode) || focusIsPortaledPair(activeElement, workingNode))) {
            if (document && !lastActiveFocus && activeElement && !autoFocus) {
              activeElement.blur();
              document.body.focus();
            } else {
              result = (0, _focusLock2.default)(workingNode, lastActiveFocus);
              lastPortaledElement = {};
            }
          }

          lastActiveFocus = document && document.activeElement;
        }
      }
    }

    return result;
  };

  var onTrap = function onTrap(event) {
    if (activateTrap() && event) {
      // prevent scroll jump
      event.stopPropagation();
      event.preventDefault();
    }
  };

  var onBlur = exports.onBlur = function onBlur() {
    return (0, util.deferAction)(activateTrap);
  };

  var onFocus = exports.onFocus = function onFocus(event) {
    // detect portal
    var source = event.target;
    var currentNode = event.currentTarget;

    if (!currentNode.contains(source)) {
      recordPortal(currentNode, source);
    }
  };

  var FocusWatcher = function FocusWatcher() {
    return null;
  };

  var FocusTrap = function FocusTrap(_ref) {
    var children = _ref.children;
    return _react2.default.createElement('div', {
      onBlur: onBlur,
      onFocus: onFocus
    }, children);
  };

  FocusTrap.propTypes = {
    children: _propTypes2.default.node.isRequired
  };

  var attachHandler = function attachHandler() {
    document.addEventListener('focusin', onTrap, true);
    document.addEventListener('focusout', onBlur);
  };

  var detachHandler = function detachHandler() {
    document.removeEventListener('focusin', onTrap, true);
    document.removeEventListener('focusout', onBlur);
  };

  function reducePropsToState(propsList) {
    return propsList.filter(function (_ref2) {
      var disabled = _ref2.disabled;
      return !disabled;
    }).slice(-1)[0];
  }

  function handleStateChangeOnClient(trap) {
    if (trap && !lastActiveTrap) {
      attachHandler();
    }

    var lastTrap = lastActiveTrap;
    var sameTrap = lastTrap && trap && trap.onActivation === lastTrap.onActivation;
    lastActiveTrap = trap;

    if (lastTrap && !sameTrap) {
      lastTrap.onDeactivation();
    }

    if (trap) {
      lastActiveFocus = null;

      if (!sameTrap || lastTrap.observed !== trap.observed) {
        trap.onActivation();
      }

      activateTrap(true);
      (0, util.deferAction)(activateTrap);
    } else {
      detachHandler();
      lastActiveFocus = null;
    }
  }

  exports.default =
  /*#__PURE__*/
  (0, _reactClientsideEffect2.default)(reducePropsToState, handleStateChangeOnClient)(FocusWatcher);
  });

  unwrapExports(Trap);
  var Trap_1 = Trap.onFocus;
  var Trap_2 = Trap.onBlur;

  var Lock = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _createClass =
  /*#__PURE__*/
  function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();



  var _react2 =
  /*#__PURE__*/
  _interopRequireDefault(React);



  var _propTypes2 =
  /*#__PURE__*/
  _interopRequireDefault(PropTypes);





  var _Trap2 =
  /*#__PURE__*/
  _interopRequireDefault(Trap);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var RenderChildren = function RenderChildren(_ref) {
    var children = _ref.children;
    return _react2.default.createElement('div', null, children);
  };

  RenderChildren.propTypes = {
    children: _propTypes2.default.node.isRequired
  };
  var Fragment = _react2.default.Fragment ? _react2.default.Fragment : RenderChildren;
  var hidden = {
    width: '1px',
    height: '0px',
    padding: 0,
    overflow: 'hidden',
    position: 'fixed',
    top: '1px',
    left: '1px'
  };

  var FocusLock =
  /*#__PURE__*/
  function (_Component) {
    _inherits(FocusLock, _Component);

    function FocusLock() {
      var _ref2;

      var _temp, _this, _ret;

      _classCallCheck(this, FocusLock);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = FocusLock.__proto__ || Object.getPrototypeOf(FocusLock)).call.apply(_ref2, [this].concat(args))), _this), _this.state = {
        observed: undefined
      }, _this.onActivation = function () {
        _this.originalFocusedElement = _this.originalFocusedElement || document && document.activeElement;

        if (_this.state.observed && _this.props.onActivation) {
          _this.props.onActivation(_this.state.observed);
        }
      }, _this.onDeactivation = function () {
        if (_this.props.returnFocus && _this.originalFocusedElement && _this.originalFocusedElement.focus) {
          _this.originalFocusedElement.focus();

          _this.originalFocusedElement = null;
        }

        if (_this.props.onDeactivation) {
          _this.props.onDeactivation(_this.state.observed);
        }
      }, _this.setObserveNode = function (observed) {
        return _this.setState({
          observed: observed
        });
      }, _this.update = function () {
        return _this.setState(function (prevState) {
          return {
            escapeAttempts: prevState.escapeAttempts + 1
          };
        });
      }, _this.originalFocusedElement = null, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(FocusLock, [{
      key: 'render',
      value: function render() {
        var _Object$assign;

        var _props = this.props,
            children = _props.children,
            disabled = _props.disabled,
            noFocusGuards = _props.noFocusGuards,
            persistentFocus = _props.persistentFocus,
            autoFocus = _props.autoFocus,
            allowTextSelection = _props.allowTextSelection,
            group = _props.group,
            className = _props.className,
            whiteList = _props.whiteList,
            _props$as = _props.as,
            Container = _props$as === undefined ? 'div' : _props$as,
            _props$lockProps = _props.lockProps,
            containerProps = _props$lockProps === undefined ? {} : _props$lockProps;
        var observed = this.state.observed;

        if (typeof allowTextSelection !== 'undefined') {
          // eslint-disable-next-line no-console
          console.warn('React-Focus-Lock: allowTextSelection is deprecated and enabled by default');
        }

        var lockProps = Object.assign((_Object$assign = {}, _defineProperty(_Object$assign, setFocus.constants.FOCUS_DISABLED, disabled && 'disabled'), _defineProperty(_Object$assign, setFocus.constants.FOCUS_GROUP, group), _Object$assign), containerProps);
        return _react2.default.createElement(Fragment, null, !noFocusGuards && [_react2.default.createElement('div', {
          key: 'guard-first',
          'data-focus-guard': true,
          tabIndex: disabled ? -1 : 0,
          style: hidden
        }), // nearest focus guard
        _react2.default.createElement('div', {
          key: 'guard-nearest',
          'data-focus-guard': true,
          tabIndex: disabled ? -1 : 1,
          style: hidden
        })], _react2.default.createElement(Container, _extends({
          ref: this.setObserveNode
        }, lockProps, {
          className: className,
          onBlur: Trap.onBlur,
          onFocus: Trap.onFocus
        }), _react2.default.createElement(_Trap2.default, {
          observed: observed,
          disabled: disabled,
          persistentFocus: persistentFocus,
          autoFocus: autoFocus,
          whiteList: whiteList,
          onActivation: this.onActivation,
          onDeactivation: this.onDeactivation
        }), children), !noFocusGuards && _react2.default.createElement('div', {
          'data-focus-guard': true,
          tabIndex: disabled ? -1 : 0,
          style: hidden
        }));
      }
    }]);

    return FocusLock;
  }(React.Component);

  FocusLock.propTypes = {
    children: _propTypes2.default.node.isRequired,
    disabled: _propTypes2.default.bool,
    returnFocus: _propTypes2.default.bool,
    noFocusGuards: _propTypes2.default.bool,
    allowTextSelection: _propTypes2.default.bool,
    autoFocus: _propTypes2.default.bool,
    persistentFocus: _propTypes2.default.bool,
    group: _propTypes2.default.string,
    className: _propTypes2.default.string,
    whiteList: _propTypes2.default.func,
    as:
    /*#__PURE__*/
    _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
    lockProps: _propTypes2.default.object,
    onActivation: _propTypes2.default.func,
    onDeactivation: _propTypes2.default.func
  };
  FocusLock.defaultProps = {
    disabled: false,
    returnFocus: false,
    noFocusGuards: false,
    autoFocus: true,
    persistentFocus: false,
    allowTextSelection: undefined,
    group: undefined,
    className: undefined,
    whiteList: undefined,
    as: 'div',
    lockProps: {},
    onActivation: undefined,
    onDeactivation: undefined
  };
  exports.default = FocusLock;
  });

  unwrapExports(Lock);

  var AutoFocusInside_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };



  var _react2 =
  /*#__PURE__*/
  _interopRequireDefault(React);



  var _propTypes2 =
  /*#__PURE__*/
  _interopRequireDefault(PropTypes);



  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  var AutoFocusInside = function AutoFocusInside(_ref) {
    var disabled = _ref.disabled,
        children = _ref.children,
        className = _ref.className;
    return _react2.default.createElement('div', _extends({}, _defineProperty({}, setFocus.constants.FOCUS_AUTO, !disabled), {
      className: className
    }), children);
  };

  AutoFocusInside.propTypes = {
    children: _propTypes2.default.node.isRequired,
    disabled: _propTypes2.default.bool,
    className: _propTypes2.default.string
  };
  AutoFocusInside.defaultProps = {
    disabled: false,
    className: undefined
  };
  exports.default = AutoFocusInside;
  });

  unwrapExports(AutoFocusInside_1);

  var MoveFocusInside_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _createClass =
  /*#__PURE__*/
  function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();



  var _react2 =
  /*#__PURE__*/
  _interopRequireDefault(React);



  var _propTypes2 =
  /*#__PURE__*/
  _interopRequireDefault(PropTypes);



  var _focusLock2 =
  /*#__PURE__*/
  _interopRequireDefault(setFocus);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var MoveFocusInside =
  /*#__PURE__*/
  function (_Component) {
    _inherits(MoveFocusInside, _Component);

    function MoveFocusInside() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, MoveFocusInside);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = MoveFocusInside.__proto__ || Object.getPrototypeOf(MoveFocusInside)).call.apply(_ref, [this].concat(args))), _this), _this.setObserveNode = function (ref) {
        _this.observed = ref;

        _this.moveFocus();
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(MoveFocusInside, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        this.moveFocus();
      }
    }, {
      key: 'componentDidUpdate',
      value: function componentDidUpdate(prevProps) {
        if (prevProps.disabled && !this.props.disabled) {
          this.moveFocus();
        }
      }
    }, {
      key: 'moveFocus',
      value: function moveFocus() {
        var observed = this.observed;

        if (!this.props.disabled && observed) {
          if (!(0, setFocus.focusInside)(observed)) {
            (0, _focusLock2.default)(observed, null);
          }
        }
      }
    }, {
      key: 'render',
      value: function render() {
        var _props = this.props,
            children = _props.children,
            disabled = _props.disabled,
            className = _props.className;
        return _react2.default.createElement('div', _extends({}, _defineProperty({}, setFocus.constants.FOCUS_AUTO, !disabled), {
          ref: this.setObserveNode,
          className: className
        }), children);
      }
    }]);

    return MoveFocusInside;
  }(React.Component);

  MoveFocusInside.propTypes = {
    children: _propTypes2.default.node.isRequired,
    disabled: _propTypes2.default.bool,
    className: _propTypes2.default.string
  };
  MoveFocusInside.defaultProps = {
    disabled: false,
    className: undefined
  };
  exports.default = MoveFocusInside;
  });

  unwrapExports(MoveFocusInside_1);

  var FreeFocusInside_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };



  var _react2 =
  /*#__PURE__*/
  _interopRequireDefault(React);



  var _propTypes2 =
  /*#__PURE__*/
  _interopRequireDefault(PropTypes);



  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  var FreeFocusInside = function FreeFocusInside(_ref) {
    var children = _ref.children,
        className = _ref.className;
    return _react2.default.createElement('div', _extends({}, _defineProperty({}, setFocus.constants.FOCUS_ALLOW, true), {
      className: className
    }), children);
  };

  FreeFocusInside.propTypes = {
    children: _propTypes2.default.node.isRequired,
    className: _propTypes2.default.string
  };
  FreeFocusInside.defaultProps = {
    disabled: false,
    className: undefined
  };
  exports.default = FreeFocusInside;
  });

  unwrapExports(FreeFocusInside_1);

  var es2015 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FreeFocusInside = exports.MoveFocusInside = exports.AutoFocusInside = undefined;



  var _Lock2 =
  /*#__PURE__*/
  _interopRequireDefault(Lock);



  var _AutoFocusInside2 =
  /*#__PURE__*/
  _interopRequireDefault(AutoFocusInside_1);



  var _MoveFocusInside2 =
  /*#__PURE__*/
  _interopRequireDefault(MoveFocusInside_1);



  var _FreeFocusInside2 =
  /*#__PURE__*/
  _interopRequireDefault(FreeFocusInside_1);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.AutoFocusInside = _AutoFocusInside2.default;
  exports.MoveFocusInside = _MoveFocusInside2.default;
  exports.FreeFocusInside = _FreeFocusInside2.default;
  exports.default = _Lock2.default;
  });

  var FocusLock = unwrapExports(es2015);
  var es2015_1 = es2015.FreeFocusInside;
  var es2015_2 = es2015.MoveFocusInside;
  var es2015_3 = es2015.AutoFocusInside;

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  function componentWillMount() {
    // Call this.constructor.gDSFP to support sub-classes.
    var state = this.constructor.getDerivedStateFromProps(this.props, this.state);

    if (state !== null && state !== undefined) {
      this.setState(state);
    }
  }

  function componentWillReceiveProps(nextProps) {
    // Call this.constructor.gDSFP to support sub-classes.
    // Use the setState() updater to ensure state isn't stale in certain edge cases.
    function updater(prevState) {
      var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
      return state !== null && state !== undefined ? state : null;
    } // Binding "this" is important for shallow renderer support.


    this.setState(updater.bind(this));
  }

  function componentWillUpdate(nextProps, nextState) {
    try {
      var prevProps = this.props;
      var prevState = this.state;
      this.props = nextProps;
      this.state = nextState;
      this.__reactInternalSnapshotFlag = true;
      this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(prevProps, prevState);
    } finally {
      this.props = prevProps;
      this.state = prevState;
    }
  } // React may warn about cWM/cWRP/cWU methods being deprecated.
  // Add a flag to suppress these warnings for this special case.


  componentWillMount.__suppressDeprecationWarning = true;
  componentWillReceiveProps.__suppressDeprecationWarning = true;
  componentWillUpdate.__suppressDeprecationWarning = true;

  function polyfill(Component) {
    var prototype = Component.prototype;

    if (!prototype || !prototype.isReactComponent) {
      throw new Error('Can only polyfill class components');
    }

    if (typeof Component.getDerivedStateFromProps !== 'function' && typeof prototype.getSnapshotBeforeUpdate !== 'function') {
      return Component;
    } // If new component APIs are defined, "unsafe" lifecycles won't be called.
    // Error if any of these lifecycles are present,
    // Because they would work differently between older and newer (16.3+) versions of React.


    var foundWillMountName = null;
    var foundWillReceivePropsName = null;
    var foundWillUpdateName = null;

    if (typeof prototype.componentWillMount === 'function') {
      foundWillMountName = 'componentWillMount';
    } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {
      foundWillMountName = 'UNSAFE_componentWillMount';
    }

    if (typeof prototype.componentWillReceiveProps === 'function') {
      foundWillReceivePropsName = 'componentWillReceiveProps';
    } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {
      foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
    }

    if (typeof prototype.componentWillUpdate === 'function') {
      foundWillUpdateName = 'componentWillUpdate';
    } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {
      foundWillUpdateName = 'UNSAFE_componentWillUpdate';
    }

    if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
      var componentName = Component.displayName || Component.name;
      var newApiName = typeof Component.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
      throw Error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + componentName + ' uses ' + newApiName + ' but also contains the following legacy lifecycles:' + (foundWillMountName !== null ? '\n  ' + foundWillMountName : '') + (foundWillReceivePropsName !== null ? '\n  ' + foundWillReceivePropsName : '') + (foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '') + '\n\nThe above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-async-component-lifecycle-hooks');
    } // React <= 16.2 does not support static getDerivedStateFromProps.
    // As a workaround, use cWM and cWRP to invoke the new static lifecycle.
    // Newer versions of React will ignore these lifecycles if gDSFP exists.


    if (typeof Component.getDerivedStateFromProps === 'function') {
      prototype.componentWillMount = componentWillMount;
      prototype.componentWillReceiveProps = componentWillReceiveProps;
    } // React <= 16.2 does not support getSnapshotBeforeUpdate.
    // As a workaround, use cWU to invoke the new lifecycle.
    // Newer versions of React will ignore that lifecycle if gSBU exists.


    if (typeof prototype.getSnapshotBeforeUpdate === 'function') {
      if (typeof prototype.componentDidUpdate !== 'function') {
        throw new Error('Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype');
      }

      prototype.componentWillUpdate = componentWillUpdate;
      var componentDidUpdate = prototype.componentDidUpdate;

      prototype.componentDidUpdate = function componentDidUpdatePolyfill(prevProps, prevState, maybeSnapshot) {
        // 16.3+ will not execute our will-update method;
        // It will pass a snapshot value to did-update though.
        // Older versions will require our polyfilled will-update value.
        // We need to handle both cases, but can't just check for the presence of "maybeSnapshot",
        // Because for <= 15.x versions this might be a "prevContext" object.
        // We also can't just check "__reactInternalSnapshot",
        // Because get-snapshot might return a falsy value.
        // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.
        var snapshot = this.__reactInternalSnapshotFlag ? this.__reactInternalSnapshot : maybeSnapshot;
        componentDidUpdate.call(this, prevProps, prevState, snapshot);
      };
    }

    return Component;
  }

  var reactLifecyclesCompat_es = /*#__PURE__*/Object.freeze({
    polyfill: polyfill
  });

  var PropTypes$1 = createCommonjsModule(function (module, exports) {

  exports.__esModule = true;
  exports.transitionTimeout = transitionTimeout;
  exports.classNamesShape = exports.timeoutsShape = void 0;

  var _propTypes =
  /*#__PURE__*/
  _interopRequireDefault(
  /*#__PURE__*/
  PropTypes);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function transitionTimeout(transitionType) {
    var timeoutPropName = 'transition' + transitionType + 'Timeout';
    var enabledPropName = 'transition' + transitionType;
    return function (props) {
      // If the transition is enabled
      if (props[enabledPropName]) {
        // If no timeout duration is provided
        if (props[timeoutPropName] == null) {
          return new Error(timeoutPropName + ' wasn\'t supplied to CSSTransitionGroup: ' + 'this can cause unreliable animations and won\'t be supported in ' + 'a future version of React. See ' + 'https://fb.me/react-animation-transition-group-timeout for more ' + 'information.'); // If the duration isn't a number
        } else if (typeof props[timeoutPropName] !== 'number') {
          return new Error(timeoutPropName + ' must be a number (in milliseconds)');
        }
      }

      return null;
    };
  }

  var timeoutsShape =
  /*#__PURE__*/
  _propTypes.default.oneOfType([_propTypes.default.number,
  /*#__PURE__*/
  _propTypes.default.shape({
    enter: _propTypes.default.number,
    exit: _propTypes.default.number
  }).isRequired]);

  exports.timeoutsShape = timeoutsShape;

  var classNamesShape =
  /*#__PURE__*/
  _propTypes.default.oneOfType([_propTypes.default.string,
  /*#__PURE__*/
  _propTypes.default.shape({
    enter: _propTypes.default.string,
    exit: _propTypes.default.string,
    active: _propTypes.default.string
  }),
  /*#__PURE__*/
  _propTypes.default.shape({
    enter: _propTypes.default.string,
    enterDone: _propTypes.default.string,
    enterActive: _propTypes.default.string,
    exit: _propTypes.default.string,
    exitDone: _propTypes.default.string,
    exitActive: _propTypes.default.string
  })]);

  exports.classNamesShape = classNamesShape;
  });

  unwrapExports(PropTypes$1);
  var PropTypes_1 = PropTypes$1.transitionTimeout;
  var PropTypes_2 = PropTypes$1.classNamesShape;
  var PropTypes_3 = PropTypes$1.timeoutsShape;

  var Transition_1 = createCommonjsModule(function (module, exports) {

  exports.__esModule = true;
  exports.default = exports.EXITING = exports.ENTERED = exports.ENTERING = exports.EXITED = exports.UNMOUNTED = void 0;

  var PropTypes$$1 =
  /*#__PURE__*/
  _interopRequireWildcard(
  /*#__PURE__*/
  PropTypes);

  var _react =
  /*#__PURE__*/
  _interopRequireDefault(
  /*#__PURE__*/
  React);

  var _reactDom =
  /*#__PURE__*/
  _interopRequireDefault(
  /*#__PURE__*/
  ReactDOM);





  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};

            if (desc.get || desc.set) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  var UNMOUNTED = 'unmounted';
  exports.UNMOUNTED = UNMOUNTED;
  var EXITED = 'exited';
  exports.EXITED = EXITED;
  var ENTERING = 'entering';
  exports.ENTERING = ENTERING;
  var ENTERED = 'entered';
  exports.ENTERED = ENTERED;
  var EXITING = 'exiting';
  /**
   * The Transition component lets you describe a transition from one component
   * state to another _over time_ with a simple declarative API. Most commonly
   * it's used to animate the mounting and unmounting of a component, but can also
   * be used to describe in-place transition states as well.
   *
   * By default the `Transition` component does not alter the behavior of the
   * component it renders, it only tracks "enter" and "exit" states for the components.
   * It's up to you to give meaning and effect to those states. For example we can
   * add styles to a component when it enters or exits:
   *
   * ```jsx
   * import Transition from 'react-transition-group/Transition';
   *
   * const duration = 300;
   *
   * const defaultStyle = {
   *   transition: `opacity ${duration}ms ease-in-out`,
   *   opacity: 0,
   * }
   *
   * const transitionStyles = {
   *   entering: { opacity: 0 },
   *   entered:  { opacity: 1 },
   * };
   *
   * const Fade = ({ in: inProp }) => (
   *   <Transition in={inProp} timeout={duration}>
   *     {(state) => (
   *       <div style={{
   *         ...defaultStyle,
   *         ...transitionStyles[state]
   *       }}>
   *         I'm a fade Transition!
   *       </div>
   *     )}
   *   </Transition>
   * );
   * ```
   *
   * As noted the `Transition` component doesn't _do_ anything by itself to its child component.
   * What it does do is track transition states over time so you can update the
   * component (such as by adding styles or classes) when it changes states.
   *
   * There are 4 main states a Transition can be in:
   *  - `'entering'`
   *  - `'entered'`
   *  - `'exiting'`
   *  - `'exited'`
   *
   * Transition state is toggled via the `in` prop. When `true` the component begins the
   * "Enter" stage. During this stage, the component will shift from its current transition state,
   * to `'entering'` for the duration of the transition and then to the `'entered'` stage once
   * it's complete. Let's take the following example:
   *
   * ```jsx
   * state = { in: false };
   *
   * toggleEnterState = () => {
   *   this.setState({ in: true });
   * }
   *
   * render() {
   *   return (
   *     <div>
   *       <Transition in={this.state.in} timeout={500} />
   *       <button onClick={this.toggleEnterState}>Click to Enter</button>
   *     </div>
   *   );
   * }
   * ```
   *
   * When the button is clicked the component will shift to the `'entering'` state and
   * stay there for 500ms (the value of `timeout`) before it finally switches to `'entered'`.
   *
   * When `in` is `false` the same thing happens except the state moves from `'exiting'` to `'exited'`.
   *
   * ## Timing
   *
   * Timing is often the trickiest part of animation, mistakes can result in slight delays
   * that are hard to pin down. A common example is when you want to add an exit transition,
   * you should set the desired final styles when the state is `'exiting'`. That's when the
   * transition to those styles will start and, if you matched the `timeout` prop with the
   * CSS Transition duration, it will end exactly when the state changes to `'exited'`.
   *
   * > **Note**: For simpler transitions the `Transition` component might be enough, but
   * > take into account that it's platform-agnostic, while the `CSSTransition` component
   * > [forces reflows](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)
   * > in order to make more complex transitions more predictable. For example, even though
   * > classes `example-enter` and `example-enter-active` are applied immediately one after
   * > another, you can still transition from one to the other because of the forced reflow
   * > (read [this issue](https://github.com/reactjs/react-transition-group/issues/159#issuecomment-322761171)
   * > for more info). Take this into account when choosing between `Transition` and
   * > `CSSTransition`.
   */

  exports.EXITING = EXITING;

  var Transition =
  /*#__PURE__*/
  function (_React$Component) {
    _inheritsLoose(Transition, _React$Component);

    function Transition(props, context) {
      var _this;

      _this = _React$Component.call(this, props, context) || this;
      var parentGroup = context.transitionGroup; // In the context of a TransitionGroup all enters are really appears

      var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
      var initialStatus;
      _this.appearStatus = null;

      if (props.in) {
        if (appear) {
          initialStatus = EXITED;
          _this.appearStatus = ENTERING;
        } else {
          initialStatus = ENTERED;
        }
      } else {
        if (props.unmountOnExit || props.mountOnEnter) {
          initialStatus = UNMOUNTED;
        } else {
          initialStatus = EXITED;
        }
      }

      _this.state = {
        status: initialStatus
      };
      _this.nextCallback = null;
      return _this;
    }

    var _proto = Transition.prototype;

    _proto.getChildContext = function getChildContext() {
      return {
        transitionGroup: null // allows for nested Transitions

      };
    };

    Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
      var nextIn = _ref.in;

      if (nextIn && prevState.status === UNMOUNTED) {
        return {
          status: EXITED
        };
      }

      return null;
    }; // getSnapshotBeforeUpdate(prevProps) {
    //   let nextStatus = null
    //   if (prevProps !== this.props) {
    //     const { status } = this.state
    //     if (this.props.in) {
    //       if (status !== ENTERING && status !== ENTERED) {
    //         nextStatus = ENTERING
    //       }
    //     } else {
    //       if (status === ENTERING || status === ENTERED) {
    //         nextStatus = EXITING
    //       }
    //     }
    //   }
    //   return { nextStatus }
    // }


    _proto.componentDidMount = function componentDidMount() {
      this.updateStatus(true, this.appearStatus);
    };

    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      var nextStatus = null;

      if (prevProps !== this.props) {
        var status = this.state.status;

        if (this.props.in) {
          if (status !== ENTERING && status !== ENTERED) {
            nextStatus = ENTERING;
          }
        } else {
          if (status === ENTERING || status === ENTERED) {
            nextStatus = EXITING;
          }
        }
      }

      this.updateStatus(false, nextStatus);
    };

    _proto.componentWillUnmount = function componentWillUnmount() {
      this.cancelNextCallback();
    };

    _proto.getTimeouts = function getTimeouts() {
      var timeout = this.props.timeout;
      var exit, enter, appear;
      exit = enter = appear = timeout;

      if (timeout != null && typeof timeout !== 'number') {
        exit = timeout.exit;
        enter = timeout.enter;
        appear = timeout.appear;
      }

      return {
        exit: exit,
        enter: enter,
        appear: appear
      };
    };

    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
      if (mounting === void 0) {
        mounting = false;
      }

      if (nextStatus !== null) {
        // nextStatus will always be ENTERING or EXITING.
        this.cancelNextCallback();

        var node = _reactDom.default.findDOMNode(this);

        if (nextStatus === ENTERING) {
          this.performEnter(node, mounting);
        } else {
          this.performExit(node);
        }
      } else if (this.props.unmountOnExit && this.state.status === EXITED) {
        this.setState({
          status: UNMOUNTED
        });
      }
    };

    _proto.performEnter = function performEnter(node, mounting) {
      var _this2 = this;

      var enter = this.props.enter;
      var appearing = this.context.transitionGroup ? this.context.transitionGroup.isMounting : mounting;
      var timeouts = this.getTimeouts(); // no enter animation skip right to ENTERED
      // if we are mounting and running this it means appear _must_ be set

      if (!mounting && !enter) {
        this.safeSetState({
          status: ENTERED
        }, function () {
          _this2.props.onEntered(node);
        });
        return;
      }

      this.props.onEnter(node, appearing);
      this.safeSetState({
        status: ENTERING
      }, function () {
        _this2.props.onEntering(node, appearing); // FIXME: appear timeout?


        _this2.onTransitionEnd(node, timeouts.enter, function () {
          _this2.safeSetState({
            status: ENTERED
          }, function () {
            _this2.props.onEntered(node, appearing);
          });
        });
      });
    };

    _proto.performExit = function performExit(node) {
      var _this3 = this;

      var exit = this.props.exit;
      var timeouts = this.getTimeouts(); // no exit animation skip right to EXITED

      if (!exit) {
        this.safeSetState({
          status: EXITED
        }, function () {
          _this3.props.onExited(node);
        });
        return;
      }

      this.props.onExit(node);
      this.safeSetState({
        status: EXITING
      }, function () {
        _this3.props.onExiting(node);

        _this3.onTransitionEnd(node, timeouts.exit, function () {
          _this3.safeSetState({
            status: EXITED
          }, function () {
            _this3.props.onExited(node);
          });
        });
      });
    };

    _proto.cancelNextCallback = function cancelNextCallback() {
      if (this.nextCallback !== null) {
        this.nextCallback.cancel();
        this.nextCallback = null;
      }
    };

    _proto.safeSetState = function safeSetState(nextState, callback) {
      // This shouldn't be necessary, but there are weird race conditions with
      // setState callbacks and unmounting in testing, so always make sure that
      // we can cancel any pending setState callbacks after we unmount.
      callback = this.setNextCallback(callback);
      this.setState(nextState, callback);
    };

    _proto.setNextCallback = function setNextCallback(callback) {
      var _this4 = this;

      var active = true;

      this.nextCallback = function (event) {
        if (active) {
          active = false;
          _this4.nextCallback = null;
          callback(event);
        }
      };

      this.nextCallback.cancel = function () {
        active = false;
      };

      return this.nextCallback;
    };

    _proto.onTransitionEnd = function onTransitionEnd(node, timeout, handler) {
      this.setNextCallback(handler);

      if (node) {
        if (this.props.addEndListener) {
          this.props.addEndListener(node, this.nextCallback);
        }

        if (timeout != null) {
          setTimeout(this.nextCallback, timeout);
        }
      } else {
        setTimeout(this.nextCallback, 0);
      }
    };

    _proto.render = function render() {
      var status = this.state.status;

      if (status === UNMOUNTED) {
        return null;
      }

      var _this$props = this.props,
          children = _this$props.children,
          childProps = _objectWithoutPropertiesLoose(_this$props, ["children"]); // filter props for Transtition


      delete childProps.in;
      delete childProps.mountOnEnter;
      delete childProps.unmountOnExit;
      delete childProps.appear;
      delete childProps.enter;
      delete childProps.exit;
      delete childProps.timeout;
      delete childProps.addEndListener;
      delete childProps.onEnter;
      delete childProps.onEntering;
      delete childProps.onEntered;
      delete childProps.onExit;
      delete childProps.onExiting;
      delete childProps.onExited;

      if (typeof children === 'function') {
        return children(status, childProps);
      }

      var child = _react.default.Children.only(children);

      return _react.default.cloneElement(child, childProps);
    };

    return Transition;
  }(_react.default.Component);

  Transition.contextTypes = {
    transitionGroup: PropTypes$$1.object
  };
  Transition.childContextTypes = {
    transitionGroup: function transitionGroup() {}
  };
  Transition.propTypes = process.env.NODE_ENV !== "production" ? {
    /**
     * A `function` child can be used instead of a React element.
     * This function is called with the current transition status
     * ('entering', 'entered', 'exiting', 'exited', 'unmounted'), which can be used
     * to apply context specific props to a component.
     *
     * ```jsx
     * <Transition timeout={150}>
     *   {(status) => (
     *     <MyComponent className={`fade fade-${status}`} />
     *   )}
     * </Transition>
     * ```
     */
    children:
    /*#__PURE__*/
    PropTypes$$1.oneOfType([PropTypes$$1.func.isRequired, PropTypes$$1.element.isRequired]).isRequired,

    /**
     * Show the component; triggers the enter or exit states
     */
    in: PropTypes$$1.bool,

    /**
     * By default the child component is mounted immediately along with
     * the parent `Transition` component. If you want to "lazy mount" the component on the
     * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
     * mounted, even on "exited", unless you also specify `unmountOnExit`.
     */
    mountOnEnter: PropTypes$$1.bool,

    /**
     * By default the child component stays mounted after it reaches the `'exited'` state.
     * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
     */
    unmountOnExit: PropTypes$$1.bool,

    /**
     * Normally a component is not transitioned if it is shown when the `<Transition>` component mounts.
     * If you want to transition on the first mount set `appear` to `true`, and the
     * component will transition in as soon as the `<Transition>` mounts.
     *
     * > Note: there are no specific "appear" states. `appear` only adds an additional `enter` transition.
     */
    appear: PropTypes$$1.bool,

    /**
     * Enable or disable enter transitions.
     */
    enter: PropTypes$$1.bool,

    /**
     * Enable or disable exit transitions.
     */
    exit: PropTypes$$1.bool,

    /**
     * The duration of the transition, in milliseconds.
     * Required unless `addEndListener` is provided
     *
     * You may specify a single timeout for all transitions like: `timeout={500}`,
     * or individually like:
     *
     * ```jsx
     * timeout={{
     *  enter: 300,
     *  exit: 500,
     * }}
     * ```
     *
     * @type {number | { enter?: number, exit?: number }}
     */
    timeout: function timeout(props) {
      var pt = process.env.NODE_ENV !== "production" ? PropTypes$1.timeoutsShape : {};
      if (!props.addEndListener) pt = pt.isRequired;

      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return pt.apply(void 0, [props].concat(args));
    },

    /**
     * Add a custom transition end trigger. Called with the transitioning
     * DOM node and a `done` callback. Allows for more fine grained transition end
     * logic. **Note:** Timeouts are still used as a fallback if provided.
     *
     * ```jsx
     * addEndListener={(node, done) => {
     *   // use the css transitionend event to mark the finish of a transition
     *   node.addEventListener('transitionend', done, false);
     * }}
     * ```
     */
    addEndListener: PropTypes$$1.func,

    /**
     * Callback fired before the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEnter: PropTypes$$1.func,

    /**
     * Callback fired after the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntering: PropTypes$$1.func,

    /**
     * Callback fired after the "entered" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEntered: PropTypes$$1.func,

    /**
     * Callback fired before the "exiting" status is applied.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExit: PropTypes$$1.func,

    /**
     * Callback fired after the "exiting" status is applied.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExiting: PropTypes$$1.func,

    /**
     * Callback fired after the "exited" status is applied.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExited: PropTypes$$1.func // Name the function so it is clearer in the documentation

  } : {};

  function noop() {}

  Transition.defaultProps = {
    in: false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop,
    onEntering: noop,
    onEntered: noop,
    onExit: noop,
    onExiting: noop,
    onExited: noop
  };
  Transition.UNMOUNTED = 0;
  Transition.EXITED = 1;
  Transition.ENTERING = 2;
  Transition.ENTERED = 3;
  Transition.EXITING = 4;

  var _default =
  /*#__PURE__*/
  (0, reactLifecyclesCompat_es.polyfill)(Transition);

  exports.default = _default;
  });

  var Transition = unwrapExports(Transition_1);
  var Transition_2 = Transition_1.EXITING;
  var Transition_3 = Transition_1.ENTERED;
  var Transition_4 = Transition_1.ENTERING;
  var Transition_5 = Transition_1.EXITED;
  var Transition_6 = Transition_1.UNMOUNTED;

  var Portal =
  /*#__PURE__*/
  function (_React$Component) {
    _inheritsLoose(Portal, _React$Component);

    function Portal() {
      var _this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.state = {
        node: null
      };
      return _this;
    }

    var _proto = Portal.prototype;

    _proto.componentDidMount = function componentDidMount() {
      var node = document.createElement(this.props.type);
      document.body.appendChild(node);
      this.setState({
        node: node
      });
    };

    _proto.componentWillUnmount = function componentWillUnmount() {
      document.body.removeChild(this.state.node);
    };

    _proto.render = function render() {
      return this.state.node ? ReactDOM.createPortal(this.props.children, this.state.node) : null;
    };

    return Portal;
  }(React.Component);

  Portal.propTypes = {
    type: PropTypes.string,
    children: PropTypes.node
  };
  Portal.defaultProps = {
    type: 'sui-portal'
  };

  var ModalContext = /*#__PURE__*/
  React.createContext();

  var wrapEvent = function wrapEvent(handler, cb) {
    return function (event) {
      if (handler) {
        handler(event);
      }

      if (!event.defaultPrevented) {
        cb(event);
      }
    };
  };

  var createAriaHider = function createAriaHider(dialogNode) {
    var originalValues = [];
    var rootNodes = [];
    Array.prototype.forEach.call(document.querySelectorAll('body > *'), function (node) {
      if (node === dialogNode.parentNode) {
        return;
      }

      var attr = node.getAttribute('aria-hidden');
      var alreadyHidden = attr !== null && attr !== 'false';

      if (alreadyHidden) {
        return;
      }

      originalValues.push(attr);
      rootNodes.push(node);
      node.setAttribute('aria-hidden', 'true');
    });
    return function () {
      rootNodes.forEach(function (node, index) {
        var originalValue = originalValues[index];

        if (originalValue === null) {
          node.removeAttribute('aria-hidden');
        } else {
          node.setAttribute('aria-hidden', originalValue);
        }
      });
    };
  };

  var cx = function cx() {
    for (var _len = arguments.length, classNames = new Array(_len), _key = 0; _key < _len; _key++) {
      classNames[_key] = arguments[_key];
    }

    return classNames.filter(Boolean).join(' ');
  };

  var ModalComponent =
  /*#__PURE__*/
  function (_React$Component) {
    _inheritsLoose(ModalComponent, _React$Component);

    function ModalComponent() {
      var _this;

      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.contentRef = React.createRef();
      _this.trap = null;
      _this.disposeAriaHider = null;

      _this.handleDialogRef = function (dialogNode) {
        if (dialogNode) {
          _this.disposeAriaHider = createAriaHider(dialogNode);
        } else {
          _this.disposeAriaHider();
        }
      };

      _this.onFocusLockActivation = function () {
        var initialFocusRef = _this.props.initialFocusRef;

        if (initialFocusRef && initialFocusRef.current) {
          initialFocusRef.current.focus();
        }
      };

      return _this;
    }

    var _proto = ModalComponent.prototype;

    _proto.render = function render() {
      var _this2 = this;

      var _this$props = this.props,
          className = _this$props.className,
          forwardedRef = _this$props.forwardedRef,
          forwardedAs = _this$props.forwardedAs,
          theme = _this$props.theme,
          opened = _this$props.opened,
          onClose = _this$props.onClose,
          children = _this$props.children,
          persistent = _this$props.persistent,
          onClick = _this$props.onClick,
          onKeyDown = _this$props.onKeyDown,
          initialFocusRef = _this$props.initialFocusRef,
          props = _objectWithoutPropertiesLoose(_this$props, ["className", "forwardedRef", "forwardedAs", "theme", "opened", "onClose", "children", "persistent", "onClick", "onKeyDown", "initialFocusRef"]);

      return React.createElement(Transition, {
        timeout: theme ? theme.modalTransitionDuration : 300,
        in: opened
      }, function (status) {
        if (status === 'exited') return null;
        return React.createElement(Portal, null, React.createElement(FocusLock, {
          returnFocus: true,
          onActivation: _this2.onFocusLockActivation
        }, React.createElement("div", _extends({
          className: cx('sui-modal', "sui-modal-transition-" + status, className),
          ref: _this2.handleDialogRef,
          onClick: wrapEvent(onClick, function (event) {
            event.stopPropagation();
            onClose();
          }),
          onKeyDown: wrapEvent(onKeyDown, function (event) {
            if (event.key === 'Escape') {
              event.stopPropagation();
              onClose();
            }
          })
        }, props), React.createElement(ModalContext.Provider, {
          value: {
            contentRef: _this2.contentRef,
            onClose: onClose
          }
        }, children))));
      });
    };

    return ModalComponent;
  }(React.Component);

  var ModalComponentWithTheme =
  /*#__PURE__*/
  scStyled.withTheme(ModalComponent);
  var Modal =
  /*#__PURE__*/
  createComponent(function () {
    return {
      name: 'modal',
      InnerComponent: ModalComponentWithTheme,
      style: scStyled.css(["position:fixed;top:0;right:0;bottom:0;left:0;z-index:", ";visibility:visible;overflow-x:hidden;overflow-y:auto;opacity:0;outline:0;background-color:", ";", ";&.sui-modal-transition-entering{opacity:0;}&.sui-modal-transition-entered{opacity:1;}&.sui-modal-transition-exiting{opacity:0;}"], th('zIndexModal'), th('modalBackdropBg'), mixin('transition', scStyled.css(["opacity ", "ms ease-in-out"], th('modalTransitionDuration')))),
      propTypes: {
        children: PropTypes.node,
        opened: PropTypes.bool,
        onClose: PropTypes.func,
        initialFocusRef: PropTypes.object
      },
      defaultProps: {
        persistent: true
      }
    };
  });

  var ModalBody =
  /*#__PURE__*/
  createComponent(function () {
    return {
      name: 'modal-body',
      style: scStyled.css(["position:relative;flex:1 1 auto;padding:", ";"], th('modalInnerPadding')),
      propTypes: {
        children: PropTypes.node
      }
    };
  });

  var stopPropagation = function stopPropagation(event) {
    return event.stopPropagation();
  };

  var ModalContent =
  /*#__PURE__*/
  createComponent(function () {
    return {
      name: 'modal-content',
      render: function render(_ref) {
        var Component = _ref.Component,
            _ref2 = _ref.ref,
            onClick = _ref.onClick,
            props = _objectWithoutPropertiesLoose(_ref, ["Component", "ref", "onClick"]);

        return React.createElement(ModalContext.Consumer, null, function (modalContext) {
          return React.createElement(Component, _extends({
            tabIndex: "-1",
            ref: function ref(node) {
              if (modalContext) modalContext.contentRef.current = node;
              if (_ref2) _ref2(node);
            },
            onClick: wrapEvent(onClick, stopPropagation)
          }, props));
        });
      },
      style: scStyled.css(["position:relative;display:flex;flex-direction:column;width:100%;pointer-events:auto;background-color:", ";background-clip:padding-box;border:", " solid ", ";border-radius:", ";box-shadow:", ";outline:0;", ";"], th('modalContentBg'), th('modalContentBorderWidth'), th('modalContentBorderColor'), th('modalContentBorderRadius'), th('modalContentBoxShadowXs'), up('sm', scStyled.css(["box-shadow:", ";"], th('modalContentBoxShadowSmUp')))),
      propTypes: {
        children: PropTypes.node
      }
    };
  });

  var ModalCloseButton =
  /*#__PURE__*/
  createComponent(function () {
    return {
      name: 'modal-close-button',
      defaultComponent: 'button',
      render: function render(_ref) {
        var Component = _ref.Component,
            onClick = _ref.onClick,
            ref = _ref.ref,
            props = _objectWithoutPropertiesLoose(_ref, ["Component", "onClick", "ref"]);

        return React.createElement(ModalContext.Consumer, null, function (modalContext) {
          return React.createElement(Component, _extends({
            ref: ref,
            onClick: wrapEvent(onClick, function () {
              if (modalContext) {
                modalContext.onClose();
              }
            })
          }, props), React.createElement("span", {
            "aria-hidden": "true"
          }, "\xD7"));
        });
      },
      style: scStyled.css(["position:absolute;cursor:pointer;top:0.2rem;right:0.2rem;padding:0.3rem 0.8rem;margin:0;background-color:transparent;appearance:none;border:0;font-size:1.5rem;font-weight:700;line-height:1;border-radius:", ";opacity:0.5;", ";&:focus{opacity:1;", ";}&:hover{opacity:1;}"], th('borderRadius'), th('transitionBase'), mixin('controlFocus')),
      propTypes: {
        children: PropTypes.node
      }
    };
  });

  var ModalDialog =
  /*#__PURE__*/
  createComponent(function () {
    return {
      name: 'modal-dialog',
      render: function render(_ref) {
        var Component = _ref.Component,
            props = _objectWithoutPropertiesLoose(_ref, ["Component"]);

        return React.createElement(Component, _extends({
          role: "dialog",
          "aria-modal": "true"
        }, props));
      },
      style: scStyled.css(["position:relative;width:auto;margin:", ";pointer-events:none;display:flex;align-items:center;min-height:calc( 100% - ", " );", ";"], th('modalDialogMargin'), th('modalDialogMargin', function (value) {
        return calc(value, function (x) {
          return x * 2;
        });
      }), up('sm', scStyled.css(["max-width:500px;margin:", " auto;min-height:calc( 100% - ", " );"], th('modalDialogMarginYSmUp'), th('modalDialogMarginYSmUp', function (value) {
        return calc(value, function (x) {
          return x * 2;
        });
      })))),
      propTypes: {
        children: PropTypes.node
      }
    };
  });

  var ModalFooter =
  /*#__PURE__*/
  createComponent(function () {
    return {
      name: 'modal-footer',
      style: scStyled.css(["display:flex;align-items:center;justify-content:flex-end;padding:", ";border-top:", " solid ", ";>:not(:first-child){margin-left:0.25rem;}>:not(:last-child){margin-right:0.25rem;}"], th('modalInnerPadding'), th('modalFooterBorderWidth'), th('modalFooterBorderColor')),
      propTypes: {
        children: PropTypes.node
      }
    };
  });

  var ModalHeader =
  /*#__PURE__*/
  createComponent(function () {
    return {
      name: 'modal-header',
      style: scStyled.css(["display:flex;align-items:flex-start;justify-content:space-between;padding:", ";border-bottom:", " solid ", ";border-top-left-radius:", ";border-top-right-radius:", ";"], th('modalInnerPadding'), th('modalHeaderBorderWidth'), th('modalHeaderBorderColor'), th('modalContentBorderRadius'), th('modalContentBorderRadius')),
      propTypes: {
        children: PropTypes.node
      }
    };
  });

  var sizeStyle$3 = {
    sm:
    /*#__PURE__*/
    scStyled.css([".sui-radio-content{width:0.875rem;height:0.875rem;}.sui-radio-circle{width:8px;height:8px;}"]),
    md:
    /*#__PURE__*/
    scStyled.css([".sui-radio-content{width:1rem;height:1rem;}.sui-radio-circle{width:10px;height:10px;}"]),
    lg:
    /*#__PURE__*/
    scStyled.css([".sui-radio-content{width:1.25rem;height:1.25rem;}.sui-radio-circle{width:14px;height:14px;}"])
  };
  var containerSystem$1 =
  /*#__PURE__*/
  composeStyles$1(basics, dimensions, space, flexboxes, positions);
  var contentSystem$1 =
  /*#__PURE__*/
  composeStyles$1(dimensions, backgrounds, borders);
  var ModalHeader$1 =
  /*#__PURE__*/
  createComponent(function () {
    return {
      name: 'radio',
      system: composeStyles$1(containerSystem$1, contentSystem$1),
      applySystem: null,
      render: function render(_ref) {
        var Component = _ref.Component,
            ref = _ref.ref,
            className = _ref.className,
            size = _ref.size,
            props = _objectWithoutPropertiesLoose(_ref, ["Component", "ref", "className", "size"]);

        return React.createElement(SwitchState, props, function (_ref2) {
          var input = _ref2.input;
          return React.createElement(Component, {
            className: className
          }, React.createElement("input", _extends({
            ref: ref,
            type: "radio"
          }, input)), React.createElement("div", {
            className: "sui-radio-content"
          }, React.createElement("div", {
            className: "sui-radio-circle"
          })));
        });
      },
      style: scStyled.css(["display:inline-flex;align-items:center;justify-content:center;position:relative;width:1.5rem;height:1.5rem;position:relative;.sui-radio-content{display:flex;flex-shrink:0;align-items:center;justify-content:center;border-radius:50%;background-color:", ";border-width:", ";border-style:solid;border-color:", ";", ";}input:checked + .sui-radio-content{border-color:", ";.sui-radio-circle{transform:scale(1);}}input:focused + .sui-radio-content{", ";}input:disabled + .sui-radio-content{background-color:", ";}.sui-radio-circle{", ";border-radius:50%;background-color:", ";transform:scale(0);}", ";", ";.sui-radio-content{", ";}"], th('inputBgColor'), th('inputBorderWidth'), th('inputBorderColor'), th('transitionBase'), th('primary'), mixin('controlFocus'), th('inputDisabledBgColor'), th('transitionBase'), th('primary'), function (p) {
        return p.size && sizeStyle$3[p.size];
      }, containerSystem$1, contentSystem$1),
      propTypes: {
        checked: PropTypes.bool,
        disabled: PropTypes.bool,
        onChange: PropTypes.func,
        size: PropTypes.oneOf(['sm', 'md', 'lg']),
        value: PropTypes.string
      },
      defaultProps: {
        size: 'md'
      }
    };
  });

  var RadioGroup =
  /*#__PURE__*/
  function (_React$Component) {
    _inheritsLoose(RadioGroup, _React$Component);

    function RadioGroup() {
      var _this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.controls = [];
      return _this;
    }

    var _proto = RadioGroup.prototype;

    _proto.getChildContext = function getChildContext() {
      return {
        suiGroup: this
      };
    };

    _proto.register = function register(control) {
      this.controls.push(control);
    };

    _proto.unregister = function unregister(control) {
      var index = this.controls.indexOf(control);
      if (index !== -1) this.controls.splice(index, 1);
    };

    _proto.notify = function notify(event) {
      this.controls.forEach(function (control) {
        if (control.props.checked === undefined && control.props.name === event.target.name && control.props.value !== event.target.value) {
          control.updateState({
            checked: false
          });
        }
      });
    };

    _proto.render = function render() {
      return this.props.children;
    };

    return RadioGroup;
  }(React.Component);

  RadioGroup.childContextTypes = {
    suiGroup: PropTypes.object
  };
  RadioGroup.propTypes = {
    children: PropTypes.node
  };

  var Row =
  /*#__PURE__*/
  createComponent(function () {
    return {
      name: 'row',
      injectTheme: true,
      render: function render(_ref) {
        var Component = _ref.Component,
            gutter = _ref.gutter,
            className = _ref.className,
            justifyContent = _ref.justifyContent,
            theme = _ref.theme,
            props = _objectWithoutPropertiesLoose(_ref, ["Component", "gutter", "className", "justifyContent", "theme"]);

        return React.createElement(Component, _extends({
          className: className
        }, props));
      },
      style: function style$$1(p) {
        var gutter = px(prop('gutter', 'gridGutter')(p));
        return scStyled.css(["flex-grow:1;flex-wrap:wrap;display:flex;margin-left:-", ";margin-right:-", ";"], gutter, gutter);
      },
      propTypes: {
        children: PropTypes.node,
        gutter: PropTypes.oneOfType([PropTypes.number, PropTypes.string])
      }
    };
  });

  var renderOption = function renderOption(option) {
    var _ref = typeof option === 'string' ? {
      label: option,
      value: option
    } : option,
        label = _ref.label,
        value = _ref.value;

    return React.createElement("option", {
      key: value,
      value: value
    }, label);
  };

  var sizeStyle$4 = {
    sm:
    /*#__PURE__*/
    scStyled.css(["select{padding:", " ", ";font-size:", ";border-radius:", ";", ";}.sui-select-arrow{right:0.35rem;width:0.525rem;}"],
    /*#__PURE__*/
    th('inputPaddingYSm'),
    /*#__PURE__*/
    th('inputPaddingXSm'),
    /*#__PURE__*/
    th('fontSizeSm'),
    /*#__PURE__*/
    th('borderRadiusSm'), function (p) {
      return p.arrow && !p.multiple && 'padding-right: 1.225rem;';
    }),
    md:
    /*#__PURE__*/
    scStyled.css(["select{padding:", " ", ";font-size:", ";", ";border-radius:", ";}.sui-select-arrow{right:0.5rem;width:0.6rem;}"],
    /*#__PURE__*/
    th('inputPaddingY'),
    /*#__PURE__*/
    th('inputPaddingX'),
    /*#__PURE__*/
    th('fontSizeBase'), function (p) {
      return p.arrow && !p.multiple && 'padding-right: 1.6rem;';
    },
    /*#__PURE__*/
    th('borderRadius')),
    lg:
    /*#__PURE__*/
    scStyled.css(["select{padding:", " ", ";font-size:", ";border-radius:", ";", ";}.sui-select-arrow{right:0.625rem;width:0.75rem;}"],
    /*#__PURE__*/
    th('inputPaddingYLg'),
    /*#__PURE__*/
    th('inputPaddingXLg'),
    /*#__PURE__*/
    th('fontSizeLg'),
    /*#__PURE__*/
    th('borderRadiusLg'), function (p) {
      return p.arrow && !p.multiple && 'padding-right: 2rem;';
    })
  };
  var validStyle$1 =
  /*#__PURE__*/
  scStyled.css(["select{border-color:", ";&:focus{border-color:", ";box-shadow:", ";}}"],
  /*#__PURE__*/
  th('success'),
  /*#__PURE__*/
  th('success'),
  /*#__PURE__*/
  mixin('controlFocusBoxShadow', 'success'));
  var invalidStyle$1 =
  /*#__PURE__*/
  scStyled.css(["select{border-color:", ";&:focus{border-color:", ";box-shadow:", ";}}"],
  /*#__PURE__*/
  th('danger'),
  /*#__PURE__*/
  th('danger'),
  /*#__PURE__*/
  mixin('controlFocusBoxShadow', 'danger'));
  var controlStyle$1 =
  /*#__PURE__*/
  scStyled.css(["display:block;width:100%;select{display:block;width:100%;&:focus{border-color:", ";box-shadow:", ";}}", ";"],
  /*#__PURE__*/
  th('controlFocusBorderColor'),
  /*#__PURE__*/
  mixin('controlFocusBoxShadow', 'primary'), function (p) {
    switch (p.valid) {
      case true:
        return validStyle$1;

      case false:
        return invalidStyle$1;

      default:
        return null;
    }
  });
  var Select =
  /*#__PURE__*/
  createComponent(function () {
    return {
      name: 'select',
      render: function render(_ref2) {
        var Component = _ref2.Component,
            arrow = _ref2.arrow,
            control = _ref2.control,
            className = _ref2.className,
            options = _ref2.options,
            size = _ref2.size,
            valid = _ref2.valid,
            children = _ref2.children,
            props = _objectWithoutPropertiesLoose(_ref2, ["Component", "arrow", "control", "className", "options", "size", "valid", "children"]);

        if (options) {
          // eslint-disable-next-line no-console
          console.warn('Smooth UI: `options` prop of "Select" is deprecated and will be removed in v7, use <option> instead.');
        }

        return React.createElement(Component, {
          className: className
        }, arrow && !props.multiple ? React.createElement("svg", {
          className: "sui-select-arrow",
          viewBox: "0 0 10 5"
        }, React.createElement("g", {
          fill: "none",
          fillRule: "evenodd"
        }, React.createElement("path", {
          d: "M17 14H-7v-24h24"
        }), React.createElement("path", {
          fill: "currentColor",
          opacity: 0.5,
          d: "M0 0l5 5 5-5"
        }))) : null, React.createElement("select", props, children || options.map(function (node) {
          return node.options ? React.createElement("optgroup", {
            key: node.label,
            label: node.label
          }, node.options.map(renderOption)) : renderOption(node);
        })));
      },
      style: scStyled.css(["display:inline-block;position:relative;select{appearance:none;-webkit-appearance:none;-moz-appearance:none;-webkit-border-radius:0;display:inline-block;border-width:", ";border-color:", ";border-style:solid;line-height:", ";", ";color:", ";&:focus{", ";}&:disabled{background-color:", ";color:", ";}}.sui-select-arrow{position:absolute;top:50%;pointer-events:none;}", ";", ";"], th('inputBorderWidth'), th('inputBorderColor'), th('lineHeightBase'), th('transitionBase'), th('inputTextColor'), mixin('controlFocus'), th('inputDisabledBgColor'), th('inputDisabledText'), function (p) {
        return p.size && sizeStyle$4[p.size];
      }, function (p) {
        return p.control && controlStyle$1;
      }),
      propTypes: {
        arrow: PropTypes.bool,
        control: PropTypes.bool,
        options: PropTypes.array,
        size: PropTypes.oneOf(['sm', 'md', 'lg']),
        valid: PropTypes.bool,
        children: PropTypes.node
      },
      defaultProps: {
        arrow: true,
        size: 'md'
      }
    };
  });

  var Switch =
  /*#__PURE__*/
  createComponent(function () {
    return {
      name: 'switch',
      system: system,
      applySystem: null,
      render: function render(_ref) {
        var Component = _ref.Component,
            ref = _ref.ref,
            className = _ref.className,
            _ref$onLabel = _ref.onLabel,
            onLabel = _ref$onLabel === void 0 ? 'ON' : _ref$onLabel,
            _ref$offLabel = _ref.offLabel,
            offLabel = _ref$offLabel === void 0 ? 'OFF' : _ref$offLabel,
            labeled = _ref.labeled,
            props = _objectWithoutPropertiesLoose(_ref, ["Component", "ref", "className", "onLabel", "offLabel", "labeled"]);

        return React.createElement(SwitchState, props, function (_ref2) {
          var input = _ref2.input;
          return React.createElement(Component, {
            className: className
          }, React.createElement("input", _extends({
            ref: ref,
            type: "checkbox"
          }, input)), React.createElement("div", {
            className: "sui-switch-wrapper"
          }, React.createElement("div", {
            className: "sui-switch-content"
          }, React.createElement("span", {
            className: "sui-switch-label sui-switch-label-on"
          }, labeled ? onLabel : ''), React.createElement("div", {
            className: "sui-switch-ball"
          }), React.createElement("span", {
            className: "sui-switch-label sui-switch-label-off"
          }, labeled ? offLabel : ''))));
        });
      },
      style: scStyled.css(["display:inline-block;position:relative;width:50px;height:24px;.sui-switch-wrapper{width:50px;height:24px;border-radius:34px;background-color:", ";overflow:hidden;cursor:pointer;border-width:", ";border-color:", ";border-style:solid;", ";font-size:9px;font-weight:800;}input:focused + .sui-switch-wrapper{", ";}input:checked + .sui-switch-wrapper{background-color:", ";border-color:transparent;.sui-switch-content{transform:translateX(0);}.sui-switch-ball{background-color:", ";}}input:disabled + .sui-switch-wrapper{opacity:0.5;}.sui-switch-ball{flex-shrink:0;background-color:", ";border-radius:50%;width:18px;height:18px;", ";}.sui-switch-content{display:flex;align-items:center;height:22px;", ";transform:translateX(-25px);}.sui-switch-label{flex-shrink:0;width:27px;text-align:center;user-select:none;&.sui-switch-label-on{color:", ";}&.sui-switch-label-off{color:", ";}}.sui-switch-wrapper{", ";}"], th('gray300'), th('inputBorderWidth'), th('inputBorderColor'), th('transitionBase'), mixin('controlFocus'), th('primaryLight'), th('primary'), th('gray500'), th('transitionBase'), th('transitionBase'), th('primary'), th('gray900'), system),
      propTypes: {
        checked: PropTypes.bool,
        disabled: PropTypes.bool,
        labeled: PropTypes.bool,
        onLabel: PropTypes.string,
        offLabel: PropTypes.string,
        onChange: PropTypes.func
      }
    };
  });

  var Textarea =
  /*#__PURE__*/
  Input.withComponent('textarea');

  var Toggler =
  /*#__PURE__*/
  function (_React$Component) {
    _inheritsLoose(Toggler, _React$Component);

    function Toggler() {
      var _this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.state = {
        toggled: _this.props.defaultToggled
      };

      _this.onToggle = function (value) {
        _this.setState(function (previousState) {
          return {
            toggled: typeof value === 'boolean' ? value : !previousState.toggled
          };
        }, function () {
          if (_this.props.onToggle) {
            _this.props.onToggle(_this.state.toggled);
          }
        });
      };

      return _this;
    }

    var _proto = Toggler.prototype;

    _proto.render = function render() {
      return this.props.children({
        toggled: this.state.toggled,
        onToggle: this.onToggle
      });
    };

    return Toggler;
  }(React.Component);

  Toggler.propTypes = {
    children: PropTypes.func.isRequired,
    defaultToggled: PropTypes.bool,
    onToggle: PropTypes.func
  };
  Toggler.defaultProps = {
    defaultToggled: false
  };

  var variantTags = {
    h1: 'h1',
    h2: 'h2',
    h3: 'h3',
    h4: 'h4',
    h5: 'h5',
    h6: 'h6',
    'display-1': 'h1',
    'display-2': 'h2',
    'display-3': 'h3',
    'display-4': 'h4'
  };
  var commonHeadingStyle =
  /*#__PURE__*/
  scStyled.css(["margin-top:0;margin-bottom:", ";font-weight:", ";line-height:", ";color:", ";", ";"],
  /*#__PURE__*/
  th('headingsMarginBottom'),
  /*#__PURE__*/
  th('headingsFontWeight'),
  /*#__PURE__*/
  th('headingsLineHeight'),
  /*#__PURE__*/
  th('headingsColor'),
  /*#__PURE__*/
  th('headingsFontFamily', function (font) {
    return font ? "font-family: " + font + ";" : null;
  }));
  var variantStyle = {
    h1:
    /*#__PURE__*/
    scStyled.css(["", ";font-size:", ";"], commonHeadingStyle,
    /*#__PURE__*/
    th('h1FontSize')),
    h2:
    /*#__PURE__*/
    scStyled.css(["", ";font-size:", ";"], commonHeadingStyle,
    /*#__PURE__*/
    th('h2FontSize')),
    h3:
    /*#__PURE__*/
    scStyled.css(["", ";font-size:", ";"], commonHeadingStyle,
    /*#__PURE__*/
    th('h3FontSize')),
    h4:
    /*#__PURE__*/
    scStyled.css(["", ";font-size:", ";"], commonHeadingStyle,
    /*#__PURE__*/
    th('h4FontSize')),
    h5:
    /*#__PURE__*/
    scStyled.css(["", ";font-size:", ";"], commonHeadingStyle,
    /*#__PURE__*/
    th('h5FontSize')),
    h6:
    /*#__PURE__*/
    scStyled.css(["", ";font-size:", ";"], commonHeadingStyle,
    /*#__PURE__*/
    th('h6FontSize')),
    'display-1':
    /*#__PURE__*/
    scStyled.css(["", ";font-size:", ";font-weight:", ";line-height:", ";"], commonHeadingStyle,
    /*#__PURE__*/
    th('display1Size'),
    /*#__PURE__*/
    th('display1Weight'),
    /*#__PURE__*/
    th('displayLineHeight')),
    'display-2':
    /*#__PURE__*/
    scStyled.css(["", ";font-size:", ";font-weight:", ";line-height:", ";"], commonHeadingStyle,
    /*#__PURE__*/
    th('display2Size'),
    /*#__PURE__*/
    th('display2Weight'),
    /*#__PURE__*/
    th('displayLineHeight')),
    'display-3':
    /*#__PURE__*/
    scStyled.css(["", ";font-size:", ";font-weight:", ";line-height:", ";"], commonHeadingStyle,
    /*#__PURE__*/
    th('display3Size'),
    /*#__PURE__*/
    th('display3Weight'),
    /*#__PURE__*/
    th('displayLineHeight')),
    'display-4':
    /*#__PURE__*/
    scStyled.css(["", ";font-size:", ";font-weight:", ";line-height:", ";"], commonHeadingStyle,
    /*#__PURE__*/
    th('display4Size'),
    /*#__PURE__*/
    th('display4Weight'),
    /*#__PURE__*/
    th('displayLineHeight'))
  };
  var Typography =
  /*#__PURE__*/
  createComponent(function () {
    return {
      name: 'typo',
      defaultComponent: null,
      render: function render(_ref) {
        var className = _ref.className,
            BaseComponent = _ref.Component,
            variant = _ref.variant,
            props = _objectWithoutPropertiesLoose(_ref, ["className", "Component", "variant"]);

        var Component = BaseComponent || variantTags[variant] || 'span';
        return React.createElement(Component, _extends({
          className: className
        }, props));
      },
      style: scStyled.css(["", ";"], function (p) {
        return p.variant && variantStyle[p.variant];
      }),
      propTypes: {
        children: PropTypes.node,
        variant: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'display-1', 'display-2', 'display-3', 'display-4'])
      }
    };
  });

  var globalStyle = function globalStyle(customTheme) {
    if (customTheme === void 0) {
      customTheme = theme;
    }

    return polished.normalize().concat(["\n    html,\n    body {\n      font-family: " + th('fontFamily')({
      theme: customTheme
    }) + ";\n      font-size: " + th('fontSizeBase')({
      theme: customTheme
    }) + ";\n      line-height: " + th('lineHeightBase')({
      theme: customTheme
    }) + ";\n    }\n\n    * {\n      box-sizing: border-box;\n    }\n  "]);
  };

  Object.keys(scStyled).forEach(function (key) { exports[key] = scStyled[key]; });
  exports.theme = theme;
  exports.styles = styles;
  exports.Alert = Alert;
  exports.Box = Box;
  exports.Breakpoint = Breakpoint;
  exports.Button = Button;
  exports.Checkbox = Checkbox;
  exports.Col = Col;
  exports.ControlFeedback = ControlFeedback;
  exports.FormCheck = FormCheck;
  exports.FormCheckLabel = FormCheckLabel;
  exports.FormGroup = FormGroup;
  exports.Grid = Grid;
  exports.Input = Input;
  exports.Label = Label;
  exports.Modal = Modal;
  exports.ModalBody = ModalBody;
  exports.ModalContent = ModalContent;
  exports.ModalContext = ModalContext;
  exports.ModalCloseButton = ModalCloseButton;
  exports.ModalDialog = ModalDialog;
  exports.ModalFooter = ModalFooter;
  exports.ModalHeader = ModalHeader;
  exports.Portal = Portal;
  exports.Radio = ModalHeader$1;
  exports.RadioGroup = RadioGroup;
  exports.Row = Row;
  exports.Select = Select;
  exports.Switch = Switch;
  exports.SwitchState = SwitchState;
  exports.Textarea = Textarea;
  exports.Toggler = Toggler;
  exports.Transition = Transition;
  exports.Typography = Typography;
  exports.styled = styled;
  exports.globalStyle = globalStyle;
  exports.DEFAULT_BREAKPOINTS = DEFAULT_BREAKPOINTS;
  exports.getBreakpoints = getBreakpoints;
  exports.getBreakpointsEntries = getBreakpointsEntries;
  exports.getNextBreakpoint = getNextBreakpoint;
  exports.getPreviousBreakpoint = getPreviousBreakpoint;
  exports.getBreakpointMin = getBreakpointMin;
  exports.getBreakpointMax = getBreakpointMax;
  exports.mediaMinWidth = mediaMinWidth;
  exports.mediaMaxWidth = mediaMaxWidth;
  exports.mediaBetweenWidth = mediaBetweenWidth;
  exports.up = up;
  exports.down = down;
  exports.between = between;
  exports.opacity = opacity;
  exports.overflow = overflow;
  exports.basics = basics;
  exports.fontFamily = fontFamily$1;
  exports.fontSize = fontSize;
  exports.lineHeight = lineHeight;
  exports.fontWeight = fontWeight;
  exports.textAlign = textAlign;
  exports.letterSpacing = letterSpacing;
  exports.color = color;
  exports.typography = typography;
  exports.width = width;
  exports.height = height;
  exports.maxWidth = maxWidth;
  exports.maxHeight = maxHeight;
  exports.minWidth = minWidth;
  exports.minHeight = minHeight;
  exports.dimensions = dimensions;
  exports.space = space;
  exports.display = display;
  exports.alignItems = alignItems;
  exports.alignContent = alignContent;
  exports.justifyContent = justifyContent;
  exports.flexWrap = flexWrap;
  exports.flexBasis = flexBasis;
  exports.flexDirection = flexDirection;
  exports.flex = flex;
  exports.justifySelf = justifySelf;
  exports.alignSelf = alignSelf;
  exports.order = order;
  exports.flexboxes = flexboxes;
  exports.background = background;
  exports.backgroundColor = backgroundColor;
  exports.backgroundImage = backgroundImage;
  exports.backgroundSize = backgroundSize;
  exports.backgroundPosition = backgroundPosition;
  exports.backgroundRepeat = backgroundRepeat;
  exports.backgrounds = backgrounds;
  exports.position = position;
  exports.zIndex = zIndex;
  exports.top = top;
  exports.right = right;
  exports.bottom = bottom;
  exports.left = left;
  exports.positions = positions;
  exports.border = border;
  exports.borderTop = borderTop;
  exports.borderRight = borderRight;
  exports.borderBottom = borderBottom;
  exports.borderLeft = borderLeft;
  exports.borderColor = borderColor;
  exports.borderRadius = borderRadius$1;
  exports.boxShadow = boxShadow;
  exports.borders = borders;
  exports.system = system;
  exports.lazyTh = lazyTh;
  exports.th = th;
  exports.mixin = mixin;
  exports.prop = prop;
  exports.calc = calc;
  exports.unit = unit;
  exports.px = px;
  exports.stylePropType = stylePropType;
  exports.style = style;
  exports.composeStyles = composeStyles;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
