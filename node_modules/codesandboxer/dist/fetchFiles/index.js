'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends3 = require('babel-runtime/helpers/extends');

var _extends4 = _interopRequireDefault(_extends3);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _resolvePath = require('../utils/resolvePath');

var _resolvePath2 = _interopRequireDefault(_resolvePath);

var _replaceImports = require('../replaceImports');

var _replaceImports2 = _interopRequireDefault(_replaceImports);

var _ensureExample = require('./ensureExample');

var _ensureExample2 = _interopRequireDefault(_ensureExample);

var _ensurePkgJSON = require('./ensurePkgJSON');

var _ensurePkgJSON2 = _interopRequireDefault(_ensurePkgJSON);

var _fetchInternalDependencies = require('./fetchInternalDependencies');

var _fetchInternalDependencies2 = _interopRequireDefault(_fetchInternalDependencies);

var _pathBrowserify = require('path-browserify');

var _pathBrowserify2 = _interopRequireDefault(_pathBrowserify);

var _constants = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(_ref) {
    var examplePath = _ref.examplePath,
        pkgJSON = _ref.pkgJSON,
        gitInfo = _ref.gitInfo,
        _ref$importReplacemen = _ref.importReplacements,
        importReplacements = _ref$importReplacemen === undefined ? [] : _ref$importReplacemen,
        example = _ref.example,
        _ref$extensions = _ref.extensions,
        extensions = _ref$extensions === undefined ? [] : _ref$extensions;

    var extension, baseFilesToUse, config, pkg, _ref3, file, deps, internalImports, files, final;

    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            extension = _pathBrowserify2.default.extname(examplePath) || '.js';
            baseFilesToUse = _constants.baseFiles;


            if (extension && !['.js', '.json'].includes(extension)) {
              if (['.ts', '.tsx'].includes(extension)) {
                extensions.push('.ts', '.tsx');
                baseFilesToUse = _constants.baseFilesTS;
              } else {
                extensions.push(extension);
              }
            }
            config = { extensions: extensions };
            _context.next = 6;
            return (0, _ensurePkgJSON2.default)(pkgJSON, importReplacements, gitInfo, config);

          case 6:
            pkg = _context.sent;
            _context.next = 9;
            return (0, _ensureExample2.default)(example, importReplacements, pkg, examplePath, gitInfo, config);

          case 9:
            _ref3 = _context.sent;
            file = _ref3.file;
            deps = _ref3.deps;
            internalImports = _ref3.internalImports;
            files = (0, _extends4.default)({}, baseFilesToUse, (0, _defineProperty3.default)({}, 'example' + extension, {
              content: (0, _replaceImports2.default)(file, internalImports.map(function (m) {
                return [m, './' + (0, _resolvePath2.default)(examplePath, m)];
              }))
            }));
            _context.next = 16;
            return (0, _fetchInternalDependencies2.default)(internalImports.map(function (m) {
              return (0, _resolvePath2.default)(examplePath, m);
            }), files, pkg, deps, gitInfo, importReplacements, config, [examplePath]);

          case 16:
            final = _context.sent;
            return _context.abrupt('return', final);

          case 18:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
}();