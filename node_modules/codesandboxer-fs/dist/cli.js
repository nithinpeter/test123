#!/usr/bin/env node

'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var CLIStuff = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(cliData) {
    var _cliData$input, filePath, config, results, _results;

    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _cliData$input = (0, _slicedToArray3.default)(cliData.input, 1), filePath = _cliData$input[0];
            config = {};


            if (cliData.flags.name) config.name = cliData.flags.name;
            if (cliData.flags.allowedExtensions) {
              config.extensions = cliData.flags.allowedExtensions.split(',');
            }

            if (!cliData.flags.files) {
              _context.next = 6;
              break;
            }

            return _context.abrupt('return', console.error('We have not implemented the files flag yet to allow you to pass in custom files'));

          case 6:
            if (!cliData.flags.dependencies) {
              _context.next = 8;
              break;
            }

            return _context.abrupt('return', console.error('We have not implemented the dependencies flag yet.'));

          case 8:
            if (filePath) {
              _context.next = 10;
              break;
            }

            return _context.abrupt('return', console.error('No filePath was passed in. Please pass in the path to the file you want to sandbox'));

          case 10:
            _context.prev = 10;

            if (!cliData.flags.dry) {
              _context.next = 18;
              break;
            }

            _context.next = 14;
            return assembleFiles(filePath, config);

          case 14:
            results = _context.sent;

            console.log('dry done, here is a list of the files to be uploaded:\n', (0, _keys2.default)(results.files).join('\n'));
            _context.next = 22;
            break;

          case 18:
            _context.next = 20;
            return assembleFilesAndPost(filePath, (0, _extends3.default)({
              name: cliData.flags.name
            }, config));

          case 20:
            _results = _context.sent;

            console.log(_results);

          case 22:
            _context.next = 33;
            break;

          case 24:
            _context.prev = 24;
            _context.t0 = _context['catch'](10);
            _context.t1 = _context.t0.key;
            _context.next = _context.t1 === 'noPKGJSON' ? 29 : _context.t1 === 'noExampleFile' ? 30 : _context.t1 === 'tooManyModules' ? 31 : 32;
            break;

          case 29:
            return _context.abrupt('return', console.error('we could not resolve a package.json at ' + _context.t0.fixedPath));

          case 30:
            return _context.abrupt('return', console.error('we could not resolve the example file ' + filePath + '\nWe tried to resolve this at: ' + path.resolve(process.cwd(), _context.t0.relFilePath)));

          case 31:
            return _context.abrupt('return', console.error("The number of files this will upload to codesandbox is Too Damn High, and we can't do it, sorry."));

          case 32:
            return _context.abrupt('return', console.error(_context.t0));

          case 33:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[10, 24]]);
  }));

  return function CLIStuff(_x) {
    return _ref.apply(this, arguments);
  };
}();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var meow = require('meow');

var _require = require('./index'),
    assembleFiles = _require.assembleFiles,
    assembleFilesAndPost = _require.assembleFilesAndPost;

var path = require('path');

var cli = meow('\n    Usage\n      $ codesandboxer <filePath>\n      upload the file, and other files within its package, to codesandbox.\n\n    Options\n      --dry, -D Instead of deploying, display what will be deployed\n      --name, -n Name your sandbox\n\n      Unimplemented options (coming soon)\n      --allowedExtensions List of extensions that will be treated as if they\n      were javascript files. Most common examples are .jsx or .ts files\n      --files, -f Provide a list of files that will be included even if they do\n      not end up in the graph. Format: fileA.js,fileB.js,fileC.js\n      --dependencies -d A list of dependencies to include, even if they are not\n      mentioned\n\n    Examples\n      $ codesandboxer some/react/component.js\n', {
  flags: {
    dry: {
      type: 'boolean',
      alias: 'D'
    },
    name: {
      type: 'string',
      alias: 'n'
    },
    allowedExtensions: {
      type: 'string',
      description: 'Pass in extensions that can be used in addition to .js',
      help: 'allowedExtensions is not yet implemented'
    },
    files: {
      alias: 'f',
      type: 'string',
      description: 'Provide a list of files that will be included even if they do not get imported',
      help: 'files is not yet implemented'
    },
    dependencies: {
      alias: 'd',
      type: 'string',
      description: 'A list of dependencies to include, even if they are not mentioned in the bundled files',
      help: 'dependencies is not yet implemented'
    }
  }
});

CLIStuff(cli);