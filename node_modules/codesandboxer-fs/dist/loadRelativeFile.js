'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var loadJS = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(resolvedPath, pkgJSON, rootDir) {
    var content, file;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            content = fs.readFileSync(resolvedPath, 'utf-8');
            _context.next = 3;
            return csb.parseFile(content, pkgJSON);

          case 3:
            file = _context.sent;
            return _context.abrupt('return', (0, _assign2.default)({}, file, {
              filePath: relToRelPkgRoot(resolvedPath, rootDir)
            }));

          case 5:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function loadJS(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

var loadJSON = function () {
  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(resolvedPath, rootDir) {
    var file;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            file = fs.readFileSync(resolvedPath, 'utf-8');
            return _context2.abrupt('return', {
              file: file,
              deps: {},
              internalImports: [],
              filePath: relToRelPkgRoot(resolvedPath, rootDir)
            });

          case 2:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function loadJSON(_x4, _x5) {
    return _ref2.apply(this, arguments);
  };
}();
/* Remove the disable once image loading has been built */
/* eslint-disable-next-line no-unused-vars */


var loadImages = function () {
  var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(resolvedPath, rootDir) {
    var file;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            file = fs.readFileSync(resolvedPath);
            return _context3.abrupt('return', {
              file: new Buffer(file).toString('base64'),
              deps: {},
              internalImports: [],
              filePath: relToRelPkgRoot(resolvedPath, rootDir)
            });

          case 2:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function loadImages(_x6, _x7) {
    return _ref3.apply(this, arguments);
  };
}();

/*::
import type { Package } from 'codesandboxer'

type LoadRelativeObj = {
filePath: string,
pkgJSON: Package,
rootDir: string,
extensions: Array<string>,
}
*/

var loadRelativeFile = function () {
  var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(_ref4 /*: LoadRelativeObj */
  ) {
    var filePath = _ref4.filePath,
        pkgJSON = _ref4.pkgJSON,
        rootDir = _ref4.rootDir,
        extensions = _ref4.extensions;
    var absPath, resolvedPath, extension;
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            absPath = path.resolve(rootDir, filePath);
            resolvedPath = resolve.sync(absPath, { extensions: extensions });
            extension = path.extname(resolvedPath);

            if (extension) {
              _context4.next = 5;
              break;
            }

            throw { key: 'fileNoExtension', path: resolvedPath };

          case 5:
            if (!extensions.includes(extension)) {
              _context4.next = 7;
              break;
            }

            return _context4.abrupt('return', loadJS(resolvedPath, pkgJSON, rootDir));

          case 7:
            _context4.t0 = extension;
            _context4.next = _context4.t0 === '.png' ? 10 : _context4.t0 === '.jpeg' ? 10 : _context4.t0 === '.jpg' ? 10 : _context4.t0 === '.gif' ? 10 : _context4.t0 === '.bmp' ? 10 : _context4.t0 === '.tiff' ? 10 : _context4.t0 === '.json' ? 11 : _context4.t0 === '.js' ? 12 : 13;
            break;

          case 10:
            return _context4.abrupt('return', loadImages(resolvedPath, rootDir));

          case 11:
            return _context4.abrupt('return', loadJSON(resolvedPath, rootDir));

          case 12:
            return _context4.abrupt('return', loadJS(resolvedPath, pkgJSON, rootDir));

          case 13:
            throw new Error('unparseable filetype: ' + extension + ' for file ' + resolvedPath);

          case 14:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));

  return function loadRelativeFile(_x8) {
    return _ref5.apply(this, arguments);
  };
}();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var csb = require('codesandboxer');
var fs = require('fs');
var path = require('path');
var resolve = require('resolve');

var relToRelPkgRoot = function relToRelPkgRoot(resolvedPath, rootDir) {
  return path.relative(rootDir, resolvedPath);
};

module.exports = loadRelativeFile;