'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var assembleFiles = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(filePath /*: string */, config /*: ?Config */) {
    var extension, extensions, rootDir, absFilePath, pkgJSONPath, relFilePath, pkgJSON, exampleContent, _ref2, file, deps, internalImports, newFileLocation, files, final;

    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!config) config = {};
            extension = path.extname(filePath);
            extensions = ['.js'];

            if (config.extensions) extensions = [].concat((0, _toConsumableArray3.default)(extensions), [config.extensions]);
            if (extension && !baseExtensions.includes(extension) && !extensions.includes(extension)) {
              extensions.push(extension);
            }

            _context.next = 7;
            return pkgDir(filePath);

          case 7:
            rootDir = _context.sent;
            absFilePath = getAbsFilePath(filePath, extensions);
            pkgJSONPath = getPkgJSONPath(rootDir);
            relFilePath = path.relative(rootDir, filePath);

            // $FlowFixMe - we genuinely want dynamic requires here

            pkgJSON = require(pkgJSONPath);
            exampleContent = fs.readFileSync(absFilePath, 'utf-8');
            _context.next = 15;
            return parseFile(exampleContent, pkgJSON);

          case 15:
            _ref2 = _context.sent;
            file = _ref2.file;
            deps = _ref2.deps;
            internalImports = _ref2.internalImports;
            newFileLocation = 'example' + (extension || '.js');
            files = (0, _assign2.default)({}, getBaseFiles(newFileLocation), (0, _defineProperty3.default)({}, newFileLocation, {
              content: replaceImports(file, internalImports.map(function (m) {
                return [m, './' + resolvePath(relFilePath, m)];
              }))
            }));
            _context.next = 23;
            return loadFiles({
              files: files,
              deps: deps,
              rootDir: rootDir,
              pkgJSON: pkgJSON,
              extensions: extensions,
              internalImports: internalImports.map(function (m) {
                return resolvePath(path.relative(rootDir, filePath), m);
              }),
              priorPaths: []
            });

          case 23:
            final = _context.sent;

            if (!((0, _keys2.default)(final.files).length > 120)) {
              _context.next = 26;
              break;
            }

            throw { key: 'tooManyModules' };

          case 26:
            return _context.abrupt('return', finaliseCSB(final, config));

          case 27:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function assembleFiles(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('codesandboxer'),
    parseFile = _require.parseFile,
    replaceImports = _require.replaceImports,
    resolvePath = _require.resolvePath,
    finaliseCSB = _require.finaliseCSB;

/*::
import type { Config } from './types';
*/


var _require2 = require('./constants'),
    getBaseFiles = _require2.getBaseFiles,
    baseExtensions = _require2.baseExtensions;

var loadFiles = require('./loadFiles');
var resolve = require('resolve');

var fs = require('fs');
var path = require('path');
var pkgDir = require('pkg-dir');

var getAbsFilePath = function getAbsFilePath(relFilePath, extensions) {
  try {
    var firstPathResolve = path.resolve(relFilePath);
    var a = resolve.sync(firstPathResolve, { extensions: extensions });
    return a;
  } catch (e) {
    throw {
      key: 'noExampleFile',
      relFilePath: relFilePath
    };
  }
};

var getPkgJSONPath = function getPkgJSONPath(rootDir) {
  var fixedPath = rootDir + '/package.json';
  try {
    return resolve.sync(fixedPath);
  } catch (e) {
    throw {
      key: 'noPKGJSON',
      fixedPath: fixedPath
    };
  }
};

module.exports = assembleFiles;