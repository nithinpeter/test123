'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var loadFiles = function () {
  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(_ref /*: LoadFileObj */
  ) {
    var files = _ref.files,
        deps = _ref.deps,
        internalImports = _ref.internalImports,
        rootDir = _ref.rootDir,
        pkgJSON = _ref.pkgJSON,
        extensions = _ref.extensions,
        priorPaths = _ref.priorPaths;

    var newFiles, moreInternalImports, _loop, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, f, moreFiles;

    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _promise2.default.all(internalImports.map(function (filePath) {
              return loadRelativeFile({
                filePath: './' + filePath,
                pkgJSON: pkgJSON,
                rootDir: rootDir,
                extensions: extensions
              });
            }));

          case 2:
            newFiles = _context.sent;
            moreInternalImports = [];

            _loop = function _loop(f) {
              files[f.filePath] = { content: f.file };
              deps = (0, _assign2.default)({}, deps, f.deps);
              f.internalImports.forEach(function (m) {
                return (
                  // I think this is wrong
                  moreInternalImports.push(csb.resolvePath(f.filePath, m))
                );
              });
            };

            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context.prev = 8;

            for (_iterator = (0, _getIterator3.default)(newFiles); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              f = _step.value;

              _loop(f);
            }

            _context.next = 16;
            break;

          case 12:
            _context.prev = 12;
            _context.t0 = _context['catch'](8);
            _didIteratorError = true;
            _iteratorError = _context.t0;

          case 16:
            _context.prev = 16;
            _context.prev = 17;

            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }

          case 19:
            _context.prev = 19;

            if (!_didIteratorError) {
              _context.next = 22;
              break;
            }

            throw _iteratorError;

          case 22:
            return _context.finish(19);

          case 23:
            return _context.finish(16);

          case 24:
            if (!(count > 120)) {
              _context.next = 28;
              break;
            }

            throw { key: 'tooManyModules' };

          case 28:
            count++;

          case 29:
            moreInternalImports = moreInternalImports.filter(function (mpt) {
              return !priorPaths.includes(mpt);
            });

            if (!(moreInternalImports.length > 0)) {
              _context.next = 37;
              break;
            }

            _context.next = 33;
            return loadFiles({
              files: files,
              deps: deps,
              rootDir: rootDir,
              internalImports: moreInternalImports,
              extensions: extensions,
              pkgJSON: pkgJSON,
              priorPaths: priorPaths.concat(internalImports)
            });

          case 33:
            moreFiles = _context.sent;
            return _context.abrupt('return', {
              files: (0, _assign2.default)({}, files, moreFiles.files),
              deps: (0, _assign2.default)({}, deps, moreFiles.deps)
            });

          case 37:
            return _context.abrupt('return', { files: files, deps: deps });

          case 38:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[8, 12, 16, 24], [17,, 19, 23]]);
  }));

  return function loadFiles(_x) {
    return _ref2.apply(this, arguments);
  };
}();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var csb = require('codesandboxer');
var loadRelativeFile = require('./loadRelativeFile');
/*::
import type { Files, Package, Dependencies } from 'codesandboxer'
type LoadFileObj = {
  files: Files,
  deps: Dependencies,
  internalImports: Array<string>,
  rootDir: string,
  pkgJSON: Package,
  extensions: Array<string>,
  priorPaths: Array<string>,
};
*/

var count = 1;

module.exports = loadFiles;